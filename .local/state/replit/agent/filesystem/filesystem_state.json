{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nRadIntel CA is a specialized compliance and regulatory intelligence platform designed exclusively for radiology clinics in California. The system monitors federal (FDA, CMS) and California state sources (CDPH, RHB, MBC) for radiology-specific regulatory updates, device recalls, and compliance requirements. It features advanced modality-specific tracking (CT, MRI, X-Ray, Ultrasound, etc.), California regional segmentation, and radiation safety compliance scoring. The platform provides real-time alerts, financial impact analysis for radiology CPT codes, and maintains zero PHI exposure through client-side data storage.\n\n# User Preferences\n\n- Preferred communication style: Simple, everyday language\n- Target Market: Radiology clinics in California (initial focus)\n- Service Expansion: May expand beyond California in the future\n- Specialization: All features should be radiology-specific for now\n\n# System Architecture\n\n## Frontend Architecture\n- **React + TypeScript SPA**: Modern single-page application using React 18 with TypeScript for type safety\n- **Vite Build System**: Fast development and optimized production builds with hot module replacement\n- **Tailwind CSS + shadcn/ui**: Utility-first CSS framework with a comprehensive component library for consistent UI/UX\n- **TanStack Query**: Robust data fetching, caching, and synchronization with automatic background updates\n- **Wouter Routing**: Lightweight client-side routing for navigation between dashboard, alerts, archive, tools, and status pages\n- **Client-Side Storage**: All user preferences, CPT volumes, and clinic-specific data stored in localStorage to maintain privacy\n\n## Backend Architecture\n- **Express.js API Server**: RESTful API with middleware for logging, error handling, and request processing\n- **PostgreSQL Database Storage**: Neon PostgreSQL database with Drizzle ORM for type-safe database operations and schema management\n- **Modular Route Handlers**: Separate endpoints for data collection (`/api/recalls`, `/api/cms-pfs`, `/api/fedreg`), utilities (`/api/send-email`, `/api/feedback`), and system status\n- **Retry Logic**: Exponential backoff retry mechanism for handling upstream API failures gracefully\n- **Deterministic Scoring**: Local JavaScript module for confidence scoring based on source, flags, device matches, and financial impact\n\n## Data Processing Pipeline\n- **Multi-Source Data Collection**: Automated fetching from FDA openFDA API, CMS PFS data, and Federal Register notices\n- **AI-Powered Normalization**: Google Gemini AI for strict JSON normalization and pattern detection across different data sources\n- **Confidence Scoring System**: Deterministic algorithm that scores events based on source credibility, device matching, manufacturer notices, and financial impact\n- **Alert Categorization**: Automatic classification into Urgent (≥85 score), Informational (≥75), Digest (≥50), or Suppressed (<50)\n- **Smart Summarization**: Perplexity AI generates clinic-ready 1-2 sentence summaries for actionable alerts\n\n## Integration Layer\n- **Google Gemini AI**: Data normalization and pattern detection with structured JSON output\n- **Perplexity AI**: Clinical alert summarization optimized for radiology staff\n- **Email Service Integration**: Configurable transactional email provider (SendGrid, Mailgun, Brevo compatible)\n- **SMS Service Integration**: Optional Twilio integration for urgent alert delivery\n- **FDA openFDA API**: Real-time device enforcement recall data\n- **CMS Payment Data**: CPT code pricing changes and updates\n\n# External Dependencies\n\n## AI Services\n- **Google Gemini API**: Required for data normalization and pattern detection across regulatory sources\n- **Perplexity API**: Required for generating clinic-ready alert summaries\n\n## Data Sources\n- **FDA openFDA API**: Public API for device enforcement recalls and safety notices\n- **CMS Payment File System**: Medicare payment schedule and CPT code updates\n- **Federal Register API**: Government regulatory notices and announcements\n\n## Communication Services\n- **Email Provider**: Transactional email service (SendGrid, Mailgun, Brevo, or similar) for alert delivery\n- **Twilio SMS**: Optional SMS service for urgent alert notifications\n\n## Database & Hosting\n- **PostgreSQL**: Active Neon PostgreSQL database integrated with Drizzle ORM for type-safe operations\n- **DatabaseStorage Implementation**: Fully migrated from file-based storage to PostgreSQL with schema deployed (August 16, 2025)\n- **Neon Database**: Serverless PostgreSQL provider for production deployment\n\n## Development Tools\n- **Replit Environment**: Development and hosting platform with integrated secrets management\n- **External Cron Service**: Scheduled triggers for automated data collection (UptimeRobot, cron-job.org, or similar)","size_bytes":4806},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2766},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport session from 'express-session';\nimport connectPgSimple from 'connect-pg-simple';\nimport cookieParser from 'cookie-parser';\nimport { pool } from './db';\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\napp.use(cookieParser());\n\n// Setup session store\nconst PgSession = connectPgSimple(session);\n\napp.use(session({\n  store: new PgSession({\n    pool,\n    tableName: 'session',\n    createTableIfMissing: true\n  }),\n  secret: process.env.SESSION_SECRET || 'dev-secret-change-in-production',\n  resave: false,\n  saveUninitialized: false,\n  cookie: {\n    maxAge: 30 * 24 * 60 * 60 * 1000, // 30 days\n    httpOnly: true,\n    secure: process.env.NODE_ENV === 'production',\n    sameSite: 'lax'\n  }\n}));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2716},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { insertEventSchema, insertFeedbackSchema, type AlertResponse } from \"@shared/schema\";\nimport { scoreEvent, categorizeByScore, shouldSummarize } from \"./lib/score\";\nimport { normalizeData, detectPatterns } from \"./lib/ai-gemini\";\nimport { summarizeEvent } from \"./lib/ai-perplexity\";\nimport { sendAlertEmail } from \"./lib/email\";\nimport { sendUrgentSMS } from \"./lib/sms\";\nimport { \n  fetchCDPHAlerts, \n  fetchMBCAlerts, \n  fetchRHBAlerts, \n  classifyRadiologyModality,\n  calculateRadiologyImpact,\n  getCaliforniaRegion \n} from \"./lib/california-sources\";\nimport { fetchFDADrugRecalls, fetchFDADrugShortages } from \"./lib/fda-drug-recalls\";\nimport { checkVendorAdvisories } from \"./lib/vendor-advisories\";\nimport authRouter from \"./routes/auth\";\nimport { requireAuth } from \"./lib/auth\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Public auth routes\n  app.use('/auth', authRouter);\n  \n  // Helper function for retry logic\n  async function withRetry<T>(fn: () => Promise<T>, maxRetries = 3): Promise<T> {\n    let lastError: Error;\n    \n    for (let i = 0; i < maxRetries; i++) {\n      try {\n        return await fn();\n      } catch (error) {\n        lastError = error as Error;\n        if (i < maxRetries - 1) {\n          const delay = Math.min(200 * Math.pow(4, i), 2000);\n          await new Promise(resolve => setTimeout(resolve, delay));\n        }\n      }\n    }\n    \n    throw lastError!;\n  }\n\n  // GET /api/recalls - Fetch FDA device enforcement recalls (filtered for radiology devices)\n  app.get(\"/api/recalls\", async (req, res) => {\n    try {\n      await storage.updateSystemStatus('recalls', { lastSuccess: null, lastError: null });\n      \n      // Search specifically for radiology-related devices\n      const response = await withRetry(async () => {\n        const fdaResponse = await fetch('https://api.fda.gov/device/enforcement.json?search=(product_description:\"x-ray\"+OR+product_description:\"CT\"+OR+product_description:\"MRI\"+OR+product_description:\"ultrasound\"+OR+product_description:\"mammograph\"+OR+product_description:\"radiograph\"+OR+product_description:\"fluoroscop\")&sort=report_date:desc&limit=100');\n        if (!fdaResponse.ok) {\n          throw new Error(`FDA API error: ${fdaResponse.status}`);\n        }\n        return fdaResponse.json();\n      });\n\n      const rawEvents = response.results || [];\n      \n      // Filter for California or nationwide recalls\n      const californiaEvents = rawEvents.filter((e: any) => \n        e.state === 'CA' || e.distribution_pattern?.includes('Nationwide') || e.distribution_pattern?.includes('California')\n      );\n      \n      // Simplified normalization without AI for now\n      const normalized = californiaEvents.map((e: any) => ({\n        id: e.recall_number || Math.random().toString(36),\n        title: e.product_description || 'Unknown Device',\n        device_name: e.product_description || '',\n        date: e.report_date || e.recall_initiation_date || new Date().toISOString(),\n        firm: e.recalling_firm || e.firm_name,\n        manufacturer: e.recalling_firm || e.firm_name,\n        classification: e.classification,\n        reason: e.reason_for_recall,\n        state: e.state,\n        city: e.city,\n        status: e.status,\n        distribution_pattern: e.distribution_pattern\n      }));\n      const processedEvents = [];\n\n      for (const event of normalized) {\n        // Simplified pattern detection without AI\n        const patterns = {\n          flags: {\n            has_classification: !!event.classification,\n            has_manufacturer: !!event.manufacturer\n          },\n          match: 1.0\n        };\n        const modalityType = classifyRadiologyModality(event.device_name);\n        const californiaRegion = event.state === 'CA' ? getCaliforniaRegion(event.city || '', '') : 'Statewide';\n        \n        const enhancedEvent = {\n          ...event,\n          flags: {\n            ...patterns.flags,\n            radiation_safety: modalityType !== 'Ultrasound' && modalityType !== 'MRI'\n          },\n          match: patterns.match,\n          sources: ['openfda:enforcement'],\n          modalityType,\n          californiaRegion\n        };\n\n        // Calculate radiology impact\n        const radiologyImpact = calculateRadiologyImpact(enhancedEvent);\n        enhancedEvent.radiologyImpact = radiologyImpact;\n\n        // Score and categorize\n        const scoring = scoreEvent(enhancedEvent);\n        const category = categorizeByScore(scoring.score);\n        \n        // Use simple summary without AI for now\n        let summary = `${event.reason || 'Device recall'} - ${event.manufacturer || 'Unknown manufacturer'}`;\n\n        // Create event record\n        const eventRecord = {\n          source: 'openFDA',\n          sourceId: event.id || Math.random().toString(36),\n          title: event.title || 'Unknown Device Recall',\n          summary,\n          category,\n          score: scoring.score,\n          reasons: scoring.reasons,\n          deviceName: event.device_name,\n          model: event.model,\n          manufacturer: event.firm || event.manufacturer,\n          classification: event.classification,\n          reason: event.reason,\n          firm: event.firm,\n          state: event.state || 'CA',\n          status: event.status,\n          cptCodes: null,\n          delta: null,\n          modalityType,\n          radiologyImpact,\n          californiaRegion,\n          originalData: event,\n          sourceDate: event.date ? new Date(event.date) : new Date(),\n        };\n\n        const savedEvent = await storage.createEvent(eventRecord);\n        processedEvents.push(savedEvent);\n      }\n\n      await storage.updateSystemStatus('recalls', { lastSuccess: new Date() });\n\n      const alertResponse: AlertResponse = {\n        source: 'FDA Radiology Device Enforcement (California)',\n        count: processedEvents.length,\n        fetchedAt: new Date().toISOString(),\n        events: processedEvents,\n      };\n\n      res.json(alertResponse);\n    } catch (error) {\n      console.error('Recalls endpoint error:', error);\n      await storage.updateSystemStatus('recalls', { \n        lastError: new Date(),\n        errorCount24h: (await storage.getSystemStatus()).find(s => s.source === 'recalls')?.errorCount24h || 0 + 1\n      });\n      res.status(500).json({ error: 'Failed to fetch radiology recalls' });\n    }\n  });\n\n  // GET /api/cms-pfs - Fetch CMS PFS changes\n  app.get(\"/api/cms-pfs\", async (req, res) => {\n    try {\n      await storage.updateSystemStatus('cms_pfs', { lastSuccess: null, lastError: null });\n\n      // Load previous snapshot\n      let previousData;\n      try {\n        previousData = await storage.loadFromFile('cms.json');\n      } catch {\n        previousData = { lastSnapshot: {}, lastUpdated: null, cptCodes: [] };\n      }\n\n      // Mock CMS data for MVP - in production, this would fetch from CMS APIs\n      const currentRates = {\n        '70553': 296.65, // Brain MRI with contrast\n        '70552': 245.32, // Brain MRI without contrast\n        '70551': 189.87, // Brain MRI without and with contrast\n        '70450': 156.43, // CT head without contrast\n        '70460': 198.76, // CT head with contrast\n        '70470': 234.21, // CT head without and with contrast\n        '72148': 312.45, // MRI lumbar spine without contrast\n        '72149': 389.12, // MRI lumbar spine with contrast\n        '72158': 445.67, // MRI lumbar spine without and with contrast\n        '73721': 278.90, // MRI knee without contrast\n        '73722': 334.55, // MRI knee with contrast\n      };\n\n      const processedEvents = [];\n      const changes = [];\n\n      // Compare with previous snapshot\n      for (const [cptCode, newRate] of Object.entries(currentRates)) {\n        const oldRate = previousData.lastSnapshot[cptCode];\n        \n        if (oldRate && oldRate !== newRate) {\n          changes.push({\n            cptCode,\n            oldRate,\n            newRate,\n            change: newRate - oldRate,\n            percentChange: ((newRate - oldRate) / oldRate) * 100\n          });\n        }\n      }\n\n      // Process changes into events\n      for (const change of changes) {\n        const event = {\n          id: `cms-pfs-${change.cptCode}-${Date.now()}`,\n          source: 'cms:pfs_change',\n          title: `CPT Code ${change.cptCode} Reimbursement Rate Update`,\n          device_name: null,\n          model: null,\n          classification: null,\n          reason: 'Medicare PFS rate adjustment',\n          firm: 'CMS',\n          manufacturer: null,\n          state: null,\n          status: 'Active',\n          codes: [change.cptCode],\n          delta: { old: change.oldRate, new: change.newRate },\n          match: { exact_model: false, fuzzy_model: false },\n          flags: { maude_signal: false, manufacturer_notice: true },\n          sources: ['cms:pfs_change'],\n          date: new Date().toISOString()\n        };\n\n        // Score and categorize\n        const scoring = scoreEvent(event);\n        const category = categorizeByScore(scoring.score);\n        \n        // Summarize if needed\n        let summary = null;\n        if (shouldSummarize(category)) {\n          summary = await summarizeEvent(event);\n        }\n\n        // Create event record\n        const eventRecord = {\n          source: 'CMS',\n          sourceId: event.id,\n          title: event.title,\n          summary,\n          category,\n          score: scoring.score,\n          reasons: scoring.reasons,\n          deviceName: null,\n          model: null,\n          manufacturer: event.firm,\n          classification: null,\n          reason: event.reason,\n          firm: event.firm,\n          state: null,\n          status: event.status,\n          cptCodes: event.codes,\n          delta: event.delta,\n          originalData: event,\n          sourceDate: new Date(),\n        };\n\n        const savedEvent = await storage.createEvent(eventRecord);\n        processedEvents.push(savedEvent);\n      }\n\n      // Update snapshot\n      await storage.saveToFile('cms.json', {\n        lastSnapshot: currentRates,\n        lastUpdated: new Date().toISOString(),\n        cptCodes: Object.keys(currentRates)\n      });\n\n      await storage.updateSystemStatus('cms_pfs', { lastSuccess: new Date() });\n\n      const alertResponse: AlertResponse = {\n        source: 'CMS PFS',\n        count: processedEvents.length,\n        fetchedAt: new Date().toISOString(),\n        events: processedEvents,\n      };\n\n      res.json(alertResponse);\n    } catch (error) {\n      console.error('CMS PFS endpoint error:', error);\n      await storage.updateSystemStatus('cms_pfs', { \n        lastError: new Date(),\n        errorCount24h: (await storage.getSystemStatus()).find(s => s.source === 'cms_pfs')?.errorCount24h || 0 + 1\n      });\n      res.status(500).json({ error: 'Failed to fetch CMS PFS data' });\n    }\n  });\n\n  // GET /api/fedreg - Fetch Federal Register items\n  app.get(\"/api/fedreg\", async (req, res) => {\n    try {\n      await storage.updateSystemStatus('fedreg', { lastSuccess: null, lastError: null });\n\n      const response = await withRetry(async () => {\n        const fedRegResponse = await fetch('https://www.federalregister.gov/api/v1/articles.json?conditions[term]=radiology+OR+medical+imaging+OR+diagnostic+imaging&conditions[type][]=RULE&conditions[type][]=PRORULE&per_page=20');\n        if (!fedRegResponse.ok) {\n          throw new Error(`Federal Register API error: ${fedRegResponse.status}`);\n        }\n        return fedRegResponse.json();\n      });\n\n      const rawEvents = response.results || [];\n      const normalized = await normalizeData(rawEvents, 'Federal Register');\n      const processedEvents = [];\n\n      for (const event of normalized) {\n        // Enhance with pattern detection\n        const patterns = await detectPatterns(event);\n        const enhancedEvent = {\n          ...event,\n          flags: patterns.flags,\n          match: patterns.match,\n          sources: ['fedreg:rule']\n        };\n\n        // Score and categorize (lower baseline for FedReg)\n        const scoring = scoreEvent(enhancedEvent);\n        scoring.score = Math.max(scoring.score - 15, 0); // Reduce by 15 points for FedReg\n        const category = categorizeByScore(scoring.score);\n        \n        // Summarize if needed\n        let summary = null;\n        if (shouldSummarize(category)) {\n          summary = await summarizeEvent(enhancedEvent);\n        }\n\n        // Create event record\n        const eventRecord = {\n          source: 'Federal Register',\n          sourceId: event.id,\n          title: event.title,\n          summary,\n          category,\n          score: scoring.score,\n          reasons: scoring.reasons,\n          deviceName: null,\n          model: null,\n          manufacturer: null,\n          classification: null,\n          reason: event.reason,\n          firm: null,\n          state: null,\n          status: 'Published',\n          cptCodes: null,\n          delta: null,\n          originalData: event,\n          sourceDate: event.date ? new Date(event.date) : null,\n        };\n\n        const savedEvent = await storage.createEvent(eventRecord);\n        processedEvents.push(savedEvent);\n      }\n\n      await storage.updateSystemStatus('fedreg', { lastSuccess: new Date() });\n\n      const alertResponse: AlertResponse = {\n        source: 'Federal Register',\n        count: processedEvents.length,\n        fetchedAt: new Date().toISOString(),\n        events: processedEvents,\n      };\n\n      res.json(alertResponse);\n    } catch (error) {\n      console.error('Federal Register endpoint error:', error);\n      await storage.updateSystemStatus('fedreg', { \n        lastError: new Date(),\n        errorCount24h: (await storage.getSystemStatus()).find(s => s.source === 'fedreg')?.errorCount24h || 0 + 1\n      });\n      res.status(500).json({ error: 'Failed to fetch Federal Register data' });\n    }\n  });\n\n  // GET /api/events - Get events with filtering\n  app.get(\"/api/events\", async (req, res) => {\n    try {\n      const { limit = '50', category, source } = req.query;\n      let events = await storage.getEvents(parseInt(limit as string), category as string);\n      \n      if (source) {\n        events = events.filter(event => event.source === source);\n      }\n      \n      res.json(events);\n    } catch (error) {\n      console.error('Events endpoint error:', error);\n      res.status(500).json({ error: 'Failed to fetch events' });\n    }\n  });\n\n  // POST /api/feedback - Submit feedback\n  app.post(\"/api/feedback\", async (req, res) => {\n    try {\n      const validatedData = insertFeedbackSchema.parse(req.body);\n      const feedback = await storage.createFeedback(validatedData);\n      res.json(feedback);\n    } catch (error) {\n      console.error('Feedback endpoint error:', error);\n      res.status(400).json({ error: 'Invalid feedback data' });\n    }\n  });\n\n  // POST /api/send-email - Send email alerts\n  app.post(\"/api/send-email\", async (req, res) => {\n    try {\n      const { alertIds, recipients } = req.body;\n      \n      if (!alertIds?.length || !recipients?.length) {\n        return res.status(400).json({ error: 'Missing alert IDs or recipients' });\n      }\n\n      const alerts = [];\n      for (const id of alertIds) {\n        const event = await storage.getEventById(id);\n        if (event) alerts.push(event);\n      }\n\n      const result = await sendAlertEmail(alerts, recipients);\n      res.json(result);\n    } catch (error) {\n      console.error('Send email endpoint error:', error);\n      res.status(500).json({ error: 'Failed to send email' });\n    }\n  });\n\n  // POST /api/send-sms - Send urgent SMS alerts\n  app.post(\"/api/send-sms\", async (req, res) => {\n    try {\n      const { alertId, phoneNumbers } = req.body;\n      \n      if (!alertId || !phoneNumbers?.length) {\n        return res.status(400).json({ error: 'Missing alert ID or phone numbers' });\n      }\n\n      const alert = await storage.getEventById(alertId);\n      if (!alert) {\n        return res.status(404).json({ error: 'Alert not found' });\n      }\n\n      if (alert.category !== 'Urgent') {\n        return res.status(400).json({ error: 'SMS only available for urgent alerts' });\n      }\n\n      const results = await sendUrgentSMS(alert, phoneNumbers);\n      res.json(results);\n    } catch (error) {\n      console.error('Send SMS endpoint error:', error);\n      res.status(500).json({ error: 'Failed to send SMS' });\n    }\n  });\n\n  // GET /api/status - System status\n  app.get(\"/api/status\", async (req, res) => {\n    try {\n      const systemStatus = await storage.getSystemStatus();\n      \n      const status: {\n        lastSuccess: Record<string, Date | null>;\n        lastError: Record<string, Date | null>;\n        errorCounts24h: Record<string, number>;\n        lastDigestSent: Date | null;\n        uptime: number;\n        timestamp: string;\n      } = {\n        lastSuccess: {},\n        lastError: {},\n        errorCounts24h: {},\n        lastDigestSent: null,\n        uptime: process.uptime(),\n        timestamp: new Date().toISOString()\n      };\n\n      systemStatus.forEach(s => {\n        status.lastSuccess[s.source] = s.lastSuccess;\n        status.lastError[s.source] = s.lastError;\n        status.errorCounts24h[s.source] = s.errorCount24h || 0;\n        if (s.source === 'digest' && s.lastDigestSent) {\n          status.lastDigestSent = s.lastDigestSent;\n        }\n      });\n\n      res.json(status);\n    } catch (error) {\n      console.error('Status endpoint error:', error);\n      res.status(500).json({ error: 'Failed to get system status' });\n    }\n  });\n\n  // GET /api/drug-recalls - Fetch FDA drug recalls and shortages\n  app.get(\"/api/drug-recalls\", async (req, res) => {\n    try {\n      await storage.updateSystemStatus('drug_recalls', { lastSuccess: null, lastError: null });\n      \n      // Fetch drug enforcement reports\n      const drugResponse = await withRetry(async () => {\n        const fdaResponse = await fetch('https://api.fda.gov/drug/enforcement.json?search=report_date:[2024-01-01+TO+2024-12-31]+AND+(product_description:contrast+OR+product_description:anesthetic+OR+product_description:sedation+OR+product_description:gadolinium+OR+product_description:iodine)&sort=report_date:desc&limit=50');\n        if (!fdaResponse.ok) {\n          throw new Error(`FDA Drug API error: ${fdaResponse.status}`);\n        }\n        return fdaResponse.json();\n      });\n\n      // For MVP, skip shortage API as it's not available in enforcement endpoint\n      const shortageResponse = { results: [] };\n\n      const rawEvents = [\n        ...(drugResponse.results || []).map((item: any) => ({ ...item, type: 'recall' })),\n        ...(shortageResponse.results || []).map((item: any) => ({ ...item, type: 'shortage' }))\n      ];\n\n      const normalized = await normalizeData(rawEvents, 'FDA Drug');\n      const processedEvents = [];\n\n      for (const event of normalized) {\n        const patterns = await detectPatterns(event);\n        const enhancedEvent = {\n          ...event,\n          flags: patterns.flags,\n          match: patterns.match,\n          sources: [`fda:drug_${event.type}`]\n        };\n\n        const scoring = scoreEvent(enhancedEvent);\n        // Higher scores for contrast agents and anesthetics\n        if (event.title?.toLowerCase().includes('contrast') || \n            event.title?.toLowerCase().includes('anesthetic') ||\n            event.title?.toLowerCase().includes('gadolinium')) {\n          scoring.score += 20;\n        }\n        \n        const originalData = event.originalData || event;\n        \n        const category = categorizeByScore(scoring.score);\n        \n        let summary = null;\n        if (shouldSummarize(category)) {\n          summary = await summarizeEvent(enhancedEvent);\n        }\n\n        const eventRecord = {\n          source: 'FDA Drug',\n          sourceId: event.id,\n          title: event.title,\n          summary,\n          category,\n          score: scoring.score,\n          reasons: scoring.reasons,\n          deviceName: originalData.product_description || null,\n          model: null,\n          manufacturer: originalData.recalling_firm || null,\n          classification: event.classification,\n          reason: originalData.reason_for_recall || event.reason,\n          firm: originalData.recalling_firm || null,\n          state: event.state,\n          status: event.status,\n          cptCodes: null,\n          delta: null,\n          originalData: originalData,\n          sourceDate: originalData.report_date ? new Date(originalData.report_date) : null,\n        };\n\n        const savedEvent = await storage.createEvent(eventRecord);\n        processedEvents.push(savedEvent);\n      }\n\n      await storage.updateSystemStatus('drug_recalls', { lastSuccess: new Date() });\n\n      const alertResponse: AlertResponse = {\n        source: 'FDA Drug Recalls & Shortages',\n        count: processedEvents.length,\n        fetchedAt: new Date().toISOString(),\n        events: processedEvents,\n      };\n\n      res.json(alertResponse);\n    } catch (error) {\n      console.error('Drug recalls endpoint error:', error);\n      await storage.updateSystemStatus('drug_recalls', { \n        lastError: new Date(),\n        errorCount24h: (await storage.getSystemStatus()).find(s => s.source === 'drug_recalls')?.errorCount24h || 0 + 1\n      });\n      res.status(500).json({ error: 'Failed to fetch drug recalls' });\n    }\n  });\n\n  // GET /api/maude - Fetch MAUDE data as supporting signal\n  app.get(\"/api/maude\", async (req, res) => {\n    try {\n      await storage.updateSystemStatus('maude', { lastSuccess: null, lastError: null });\n      \n      const response = await withRetry(async () => {\n        const maudeResponse = await fetch('https://api.fda.gov/device/event.json?search=date_received:[2024-01-01+TO+2024-12-31]+AND+(device.generic_name:imaging+OR+device.generic_name:contrast+OR+device.generic_name:mri+OR+device.generic_name:ct+OR+device.generic_name:xray)&sort=date_received:desc&limit=100');\n        if (!maudeResponse.ok) {\n          throw new Error(`MAUDE API error: ${maudeResponse.status}`);\n        }\n        return maudeResponse.json();\n      });\n\n      const rawEvents = response.results || [];\n      \n      // Process MAUDE data to identify patterns and signals\n      const devicePatterns = new Map();\n      const severityPatterns = new Map();\n      \n      for (const event of rawEvents) {\n        const deviceKey = `${event.device?.manufacturer_name || 'Unknown'}-${event.device?.model_number || 'Unknown'}`;\n        const severity = event.event_type || 'Unknown';\n        \n        devicePatterns.set(deviceKey, (devicePatterns.get(deviceKey) || 0) + 1);\n        severityPatterns.set(severity, (severityPatterns.get(severity) || 0) + 1);\n      }\n\n      // Only create events for significant patterns (3+ reports for same device)\n      const processedEvents = [];\n      const significantDevices = Array.from(devicePatterns.entries())\n        .filter(([_, count]) => count >= 3)\n        .map(([deviceKey, count]) => ({ deviceKey, count }));\n\n      for (const { deviceKey, count } of significantDevices) {\n        const [manufacturer, model] = deviceKey.split('-');\n        \n        const event = {\n          id: `maude-pattern-${deviceKey.replace(/[^a-zA-Z0-9]/g, '')}-${Date.now()}`,\n          source: 'maude:pattern',\n          title: `MAUDE Signal: ${count} reports for ${manufacturer} ${model}`,\n          device_name: model,\n          model: model,\n          manufacturer: manufacturer,\n          classification: 'Signal',\n          reason: `${count} adverse event reports detected`,\n          firm: manufacturer,\n          status: 'Pattern Detected',\n          match: { exact_model: true, fuzzy_model: false },\n          flags: { maude_signal: true, manufacturer_notice: false },\n          sources: ['maude:signal'],\n          date: new Date().toISOString()\n        };\n\n        const patterns = await detectPatterns(event);\n        const enhancedEvent = {\n          ...event,\n          flags: { ...event.flags, ...patterns.flags },\n          match: patterns.match\n        };\n\n        const scoring = scoreEvent(enhancedEvent);\n        // MAUDE signals are supportive, so lower baseline score\n        scoring.score = Math.min(scoring.score, 70);\n        const category = categorizeByScore(scoring.score);\n        \n        let summary = null;\n        if (shouldSummarize(category)) {\n          summary = await summarizeEvent(enhancedEvent);\n        }\n\n        const eventRecord = {\n          source: 'MAUDE',\n          sourceId: event.id,\n          title: event.title,\n          summary,\n          category,\n          score: scoring.score,\n          reasons: scoring.reasons,\n          deviceName: event.device_name,\n          model: event.model,\n          manufacturer: event.manufacturer,\n          classification: event.classification,\n          reason: event.reason,\n          firm: event.firm,\n          state: null,\n          status: event.status,\n          cptCodes: null,\n          delta: null,\n          originalData: { signalCount: count, deviceKey },\n          sourceDate: new Date(),\n        };\n\n        const savedEvent = await storage.createEvent(eventRecord);\n        processedEvents.push(savedEvent);\n      }\n\n      await storage.updateSystemStatus('maude', { lastSuccess: new Date() });\n\n      const alertResponse: AlertResponse = {\n        source: 'MAUDE Signals',\n        count: processedEvents.length,\n        fetchedAt: new Date().toISOString(),\n        events: processedEvents,\n      };\n\n      res.json(alertResponse);\n    } catch (error) {\n      console.error('MAUDE endpoint error:', error);\n      await storage.updateSystemStatus('maude', { \n        lastError: new Date(),\n        errorCount24h: (await storage.getSystemStatus()).find(s => s.source === 'maude')?.errorCount24h || 0 + 1\n      });\n      res.status(500).json({ error: 'Failed to fetch MAUDE data' });\n    }\n  });\n\n  // GET /api/vendor-advisories - Fetch vendor security advisories\n  app.get(\"/api/vendor-advisories\", async (req, res) => {\n    try {\n      await storage.updateSystemStatus('vendor_advisories', { lastSuccess: null, lastError: null });\n      \n      const advisories = await checkVendorAdvisories();\n      const processedEvents = [];\n\n      for (const advisory of advisories) {\n        const eventRecord = {\n          source: advisory.source,\n          sourceId: advisory.sourceId,\n          title: advisory.title,\n          summary: advisory.summary,\n          category: advisory.category,\n          score: advisory.score,\n          reasons: [`Vendor: ${advisory.vendor}`, `Severity: ${advisory.severity}`],\n          deviceName: advisory.affectedProducts?.[0] || null,\n          model: advisory.affectedProducts?.[0] || null,\n          manufacturer: advisory.vendor,\n          classification: advisory.severity,\n          reason: advisory.summary,\n          firm: advisory.vendor,\n          state: null,\n          status: 'Published',\n          cptCodes: null,\n          delta: null,\n          modalityType: null,\n          radiologyImpact: null,\n          californiaRegion: null,\n          originalData: advisory,\n          sourceDate: advisory.sourceDate,\n        };\n\n        const savedEvent = await storage.createEvent(eventRecord);\n        processedEvents.push(savedEvent);\n      }\n\n      await storage.updateSystemStatus('vendor_advisories', { lastSuccess: new Date() });\n\n      const alertResponse: AlertResponse = {\n        source: 'Vendor Security Advisories',\n        count: processedEvents.length,\n        fetchedAt: new Date().toISOString(),\n        events: processedEvents,\n      };\n\n      res.json(alertResponse);\n    } catch (error) {\n      console.error('Vendor advisories endpoint error:', error);\n      await storage.updateSystemStatus('vendor_advisories', { \n        lastError: new Date(),\n        errorCount24h: (await storage.getSystemStatus()).find(s => s.source === 'vendor_advisories')?.errorCount24h || 0 + 1\n      });\n      res.status(500).json({ error: 'Failed to fetch vendor advisories' });\n    }\n  });\n\n  // GET /api/audit-deadlines - Track audit deadlines and compliance dates\n  app.get(\"/api/audit-deadlines\", async (req, res) => {\n    try {\n      await storage.updateSystemStatus('audit_deadlines', { lastSuccess: null, lastError: null });\n      \n      // Fetch MQSA and other regulatory deadlines\n      const fedRegResponse = await withRetry(async () => {\n        const response = await fetch('https://www.federalregister.gov/api/v1/articles.json?conditions[term]=MQSA+OR+mammography+OR+audit+OR+deadline+OR+compliance&conditions[type][]=RULE&conditions[type][]=NOTICE&per_page=30');\n        if (!response.ok) {\n          throw new Error(`Federal Register API error: ${response.status}`);\n        }\n        return response.json();\n      });\n\n      // Fetch CMS rule dates  \n      const cmsResponse = await withRetry(async () => {\n        const response = await fetch('https://www.federalregister.gov/api/v1/articles.json?conditions[agencies][]=centers-for-medicare-medicaid-services&conditions[term]=radiology+OR+imaging+OR+deadline&conditions[type][]=RULE&per_page=20');\n        if (!response.ok) {\n          throw new Error(`CMS Rules API error: ${response.status}`);\n        }\n        return response.json();\n      });\n\n      const rawEvents = [\n        ...(fedRegResponse.results || []).map((item: any) => ({ ...item, source_type: 'mqsa' })),\n        ...(cmsResponse.results || []).map((item: any) => ({ ...item, source_type: 'cms_rule' }))\n      ];\n\n      const processedEvents = [];\n      const now = new Date();\n\n      for (const event of rawEvents) {\n        // Extract dates from the event\n        const effectiveDate = event.effective_on ? new Date(event.effective_on) : null;\n        const commentDate = event.comments_close_on ? new Date(event.comments_close_on) : null;\n        \n        // Only process future deadlines or recent past (30 days)\n        const relevantDate = effectiveDate || commentDate;\n        if (!relevantDate) continue;\n        \n        const daysDiff = Math.ceil((relevantDate.getTime() - now.getTime()) / (1000 * 60 * 60 * 24));\n        if (daysDiff < -30 || daysDiff > 365) continue; // Skip if too old or too far future\n\n        let urgencyScore = 50;\n        if (daysDiff <= 7) urgencyScore = 90;      // 1 week\n        else if (daysDiff <= 30) urgencyScore = 80; // 1 month  \n        else if (daysDiff <= 90) urgencyScore = 70; // 3 months\n\n        const deadlineEvent = {\n          id: `deadline-${event.document_number}-${Date.now()}`,\n          source: event.source_type,\n          title: `Deadline: ${event.title}`,\n          device_name: null,\n          model: null,\n          manufacturer: null,\n          classification: 'Deadline',\n          reason: `Compliance deadline: ${relevantDate.toDateString()}`,\n          firm: event.agencies?.[0]?.name || 'Federal Agency',\n          status: daysDiff > 0 ? 'Upcoming' : 'Overdue',\n          deadline_date: relevantDate,\n          days_remaining: daysDiff,\n          match: { exact_model: false, fuzzy_model: false },\n          flags: { \n            maude_signal: false, \n            manufacturer_notice: false,\n            deadline_alert: true,\n            urgent_deadline: daysDiff <= 30\n          },\n          sources: [`${event.source_type}:deadline`],\n          date: new Date().toISOString()\n        };\n\n        const patterns = await detectPatterns(deadlineEvent);\n        const enhancedEvent = {\n          ...deadlineEvent,\n          flags: { ...deadlineEvent.flags, ...patterns.flags }\n        };\n\n        const scoring = scoreEvent(enhancedEvent);\n        scoring.score = urgencyScore; // Override with deadline urgency\n        const category = categorizeByScore(scoring.score);\n        \n        let summary = null;\n        if (shouldSummarize(category)) {\n          summary = await summarizeEvent(enhancedEvent);\n        }\n\n        const eventRecord = {\n          source: `${event.source_type.toUpperCase()} Deadline`,\n          sourceId: deadlineEvent.id,\n          title: deadlineEvent.title,\n          summary,\n          category,\n          score: scoring.score,\n          reasons: [`Deadline in ${daysDiff} days`, ...scoring.reasons],\n          deviceName: null,\n          model: null,\n          manufacturer: null,\n          classification: deadlineEvent.classification,\n          reason: deadlineEvent.reason,\n          firm: deadlineEvent.firm,\n          state: null,\n          status: deadlineEvent.status,\n          cptCodes: null,\n          delta: null,\n          originalData: { ...event, deadline_date: relevantDate, days_remaining: daysDiff },\n          sourceDate: relevantDate,\n        };\n\n        const savedEvent = await storage.createEvent(eventRecord);\n        processedEvents.push(savedEvent);\n      }\n\n      await storage.updateSystemStatus('audit_deadlines', { lastSuccess: new Date() });\n\n      const alertResponse: AlertResponse = {\n        source: 'Audit Deadlines',\n        count: processedEvents.length,\n        fetchedAt: new Date().toISOString(),\n        events: processedEvents,\n      };\n\n      res.json(alertResponse);\n    } catch (error) {\n      console.error('Audit deadlines endpoint error:', error);\n      await storage.updateSystemStatus('audit_deadlines', { \n        lastError: new Date(),\n        errorCount24h: (await storage.getSystemStatus()).find(s => s.source === 'audit_deadlines')?.errorCount24h || 0 + 1\n      });\n      res.status(500).json({ error: 'Failed to fetch audit deadlines' });\n    }\n  });\n\n  // GET /api/state-doh - Monitor state DOH radiology updates\n  app.get(\"/api/state-doh\", async (req, res) => {\n    try {\n      await storage.updateSystemStatus('state_doh', { lastSuccess: null, lastError: null });\n      \n      // Key state DOH RSS feeds and APIs for radiology\n      const stateSources = [\n        { state: 'CA', url: 'https://www.cdph.ca.gov/Programs/CHCQ/LCP/Pages/default.aspx' },\n        { state: 'NY', url: 'https://www.health.ny.gov/professionals/patients/patient_rights/' },\n        { state: 'TX', url: 'https://www.dshs.texas.gov/medical-radiologic-technology/' },\n        { state: 'FL', url: 'https://floridahealth.gov/licensing-and-regulation/' }\n      ];\n\n      // For MVP, we'll simulate state DOH monitoring\n      // In production, this would parse RSS feeds or scrape state websites\n      const mockStateUpdates = [\n        {\n          state: 'CA',\n          title: 'California CDPH Updates Mammography Facility Requirements',\n          type: 'regulation_update',\n          agency: 'California Department of Public Health',\n          effective_date: new Date(Date.now() + 45 * 24 * 60 * 60 * 1000), // 45 days from now\n          description: 'New requirements for mammography facility inspections'\n        },\n        {\n          state: 'NY', \n          title: 'New York State Medical Imaging License Renewal Period',\n          type: 'license_renewal',\n          agency: 'New York State Department of Health',\n          effective_date: new Date(Date.now() + 90 * 24 * 60 * 60 * 1000), // 90 days from now\n          description: 'Renewal period for medical imaging professional licenses'\n        }\n      ];\n\n      const processedEvents = [];\n\n      for (const update of mockStateUpdates) {\n        const now = new Date();\n        const daysDiff = Math.ceil((update.effective_date.getTime() - now.getTime()) / (1000 * 60 * 60 * 24));\n        \n        let score = 45; // Base score for state updates\n        if (daysDiff <= 30) score = 65;\n        if (daysDiff <= 14) score = 75;\n\n        const stateEvent = {\n          id: `state-doh-${update.state}-${Date.now()}`,\n          source: `state_doh:${update.state.toLowerCase()}`,\n          title: update.title,\n          device_name: null,\n          model: null,\n          manufacturer: null,\n          classification: update.type,\n          reason: update.description,\n          firm: update.agency,\n          status: 'Active',\n          state: update.state,\n          effective_date: update.effective_date,\n          days_until_effective: daysDiff,\n          match: { exact_model: false, fuzzy_model: false },\n          flags: { \n            maude_signal: false, \n            manufacturer_notice: false,\n            state_regulation: true\n          },\n          sources: [`state_doh:${update.state.toLowerCase()}`],\n          date: new Date().toISOString()\n        };\n\n        const patterns = await detectPatterns(stateEvent);\n        const enhancedEvent = {\n          ...stateEvent,\n          flags: { ...stateEvent.flags, ...patterns.flags }\n        };\n\n        const scoring = scoreEvent(enhancedEvent);\n        scoring.score = score;\n        const category = categorizeByScore(scoring.score);\n        \n        let summary = null;\n        if (shouldSummarize(category)) {\n          summary = await summarizeEvent(enhancedEvent);\n        }\n\n        const eventRecord = {\n          source: `${update.state} DOH`,\n          sourceId: stateEvent.id,\n          title: stateEvent.title,\n          summary,\n          category,\n          score: scoring.score,\n          reasons: scoring.reasons,\n          deviceName: null,\n          model: null,\n          manufacturer: null,\n          classification: stateEvent.classification,\n          reason: stateEvent.reason,\n          firm: stateEvent.firm,\n          state: stateEvent.state,\n          status: stateEvent.status,\n          cptCodes: null,\n          delta: null,\n          originalData: { ...update, days_until_effective: daysDiff },\n          sourceDate: update.effective_date,\n        };\n\n        const savedEvent = await storage.createEvent(eventRecord);\n        processedEvents.push(savedEvent);\n      }\n\n      await storage.updateSystemStatus('state_doh', { lastSuccess: new Date() });\n\n      const alertResponse: AlertResponse = {\n        source: 'State DOH Updates',\n        count: processedEvents.length,\n        fetchedAt: new Date().toISOString(),\n        events: processedEvents,\n      };\n\n      res.json(alertResponse);\n    } catch (error) {\n      console.error('State DOH endpoint error:', error);\n      await storage.updateSystemStatus('state_doh', { \n        lastError: new Date(),\n        errorCount24h: (await storage.getSystemStatus()).find(s => s.source === 'state_doh')?.errorCount24h || 0 + 1\n      });\n      res.status(500).json({ error: 'Failed to fetch state DOH updates' });\n    }\n  });\n\n  // Health check endpoint moved to /api/health to avoid conflicts with frontend routing\n  app.get(\"/api/health\", (req, res) => {\n    res.json({ \n      message: \"RadIntel service running\",\n      version: \"1.0.0\",\n      timestamp: new Date().toISOString()\n    });\n  });\n\n\n\n  const httpServer = createServer(app);\n  // GET /api/california/cdph - California Department of Public Health radiology alerts\n  app.get(\"/api/california/cdph\", async (req, res) => {\n    try {\n      await storage.updateSystemStatus('cdph', { lastSuccess: null, lastError: null });\n      \n      const alerts = await fetchCDPHAlerts();\n      const processedEvents = [];\n\n      for (const alert of alerts) {\n        const modalityType = classifyRadiologyModality(alert.deviceType || '');\n        const californiaRegion = getCaliforniaRegion('', alert.region || 'Statewide');\n        \n        const enhancedEvent = {\n          sources: ['cdph'],\n          flags: {\n            california_mandate: true,\n            radiation_safety: alert.urgency === 'high'\n          },\n          modalityType,\n          californiaRegion,\n          radiologyImpact: alert.urgency === 'high' ? 'High' : 'Medium'\n        };\n\n        const scoring = scoreEvent(enhancedEvent);\n        const category = categorizeByScore(scoring.score);\n        \n        let summary = null;\n        if (shouldSummarize(category)) {\n          summary = alert.description;\n        }\n\n        const eventRecord = {\n          source: 'CDPH',\n          sourceId: alert.id,\n          title: alert.title,\n          summary,\n          category,\n          score: scoring.score,\n          reasons: scoring.reasons,\n          deviceName: alert.deviceType,\n          state: 'CA',\n          modalityType,\n          radiologyImpact: enhancedEvent.radiologyImpact,\n          californiaRegion,\n          originalData: alert,\n          sourceDate: new Date(alert.date),\n        };\n\n        const savedEvent = await storage.createEvent(eventRecord);\n        processedEvents.push(savedEvent);\n      }\n\n      await storage.updateSystemStatus('cdph', { lastSuccess: new Date() });\n\n      res.json({\n        source: 'California Department of Public Health',\n        count: processedEvents.length,\n        fetchedAt: new Date().toISOString(),\n        events: processedEvents,\n      });\n    } catch (error) {\n      console.error('CDPH endpoint error:', error);\n      await storage.updateSystemStatus('cdph', { \n        lastError: new Date(),\n        errorCount24h: ((await storage.getSystemStatus()).find(s => s.source === 'cdph')?.errorCount24h || 0) + 1\n      });\n      res.status(500).json({ error: 'Failed to fetch CDPH alerts' });\n    }\n  });\n\n  // GET /api/california/rhb - California Radiologic Health Branch alerts\n  app.get(\"/api/california/rhb\", async (req, res) => {\n    try {\n      await storage.updateSystemStatus('rhb', { lastSuccess: null, lastError: null });\n      \n      const alerts = await fetchRHBAlerts();\n      const processedEvents = [];\n\n      for (const alert of alerts) {\n        const modalityType = classifyRadiologyModality(alert.deviceType || '');\n        \n        const enhancedEvent = {\n          sources: ['rhb'],\n          flags: {\n            california_mandate: true,\n            radiation_safety: true\n          },\n          modalityType,\n          californiaRegion: 'Statewide',\n          radiologyImpact: 'High'\n        };\n\n        const scoring = scoreEvent(enhancedEvent);\n        const category = categorizeByScore(scoring.score);\n\n        const eventRecord = {\n          source: 'RHB',\n          sourceId: alert.id,\n          title: alert.title,\n          summary: alert.description,\n          category,\n          score: scoring.score,\n          reasons: scoring.reasons,\n          deviceName: alert.deviceType,\n          state: 'CA',\n          modalityType,\n          radiologyImpact: 'High',\n          californiaRegion: 'Statewide',\n          originalData: alert,\n          sourceDate: new Date(alert.date),\n        };\n\n        const savedEvent = await storage.createEvent(eventRecord);\n        processedEvents.push(savedEvent);\n      }\n\n      await storage.updateSystemStatus('rhb', { lastSuccess: new Date() });\n\n      res.json({\n        source: 'California Radiologic Health Branch',\n        count: processedEvents.length,\n        fetchedAt: new Date().toISOString(),\n        events: processedEvents,\n      });\n    } catch (error) {\n      console.error('RHB endpoint error:', error);\n      await storage.updateSystemStatus('rhb', { \n        lastError: new Date(),\n        errorCount24h: ((await storage.getSystemStatus()).find(s => s.source === 'rhb')?.errorCount24h || 0) + 1\n      });\n      res.status(500).json({ error: 'Failed to fetch RHB alerts' });\n    }\n  });\n\n  // GET /api/california/mbc - Medical Board of California alerts\n  app.get(\"/api/california/mbc\", async (req, res) => {\n    try {\n      await storage.updateSystemStatus('mbc', { lastSuccess: null, lastError: null });\n      \n      const alerts = await fetchMBCAlerts();\n      const processedEvents = [];\n\n      for (const alert of alerts) {\n        const enhancedEvent = {\n          sources: ['mbc'],\n          flags: {\n            california_mandate: true\n          },\n          californiaRegion: 'Statewide',\n          radiologyImpact: 'Medium'\n        };\n\n        const scoring = scoreEvent(enhancedEvent);\n        const category = categorizeByScore(scoring.score);\n\n        const eventRecord = {\n          source: 'MBC',\n          sourceId: alert.id,\n          title: alert.title,\n          summary: alert.description,\n          category,\n          score: scoring.score,\n          reasons: scoring.reasons,\n          state: 'CA',\n          radiologyImpact: 'Medium',\n          californiaRegion: 'Statewide',\n          originalData: alert,\n          sourceDate: new Date(alert.date),\n        };\n\n        const savedEvent = await storage.createEvent(eventRecord);\n        processedEvents.push(savedEvent);\n      }\n\n      await storage.updateSystemStatus('mbc', { lastSuccess: new Date() });\n\n      res.json({\n        source: 'Medical Board of California',\n        count: processedEvents.length,\n        fetchedAt: new Date().toISOString(),\n        events: processedEvents,\n      });\n    } catch (error) {\n      console.error('MBC endpoint error:', error);\n      await storage.updateSystemStatus('mbc', { \n        lastError: new Date(),\n        errorCount24h: ((await storage.getSystemStatus()).find(s => s.source === 'mbc')?.errorCount24h || 0) + 1\n      });\n      res.status(500).json({ error: 'Failed to fetch MBC alerts' });\n    }\n  });\n\n  return httpServer;\n}\n","size_bytes":44933},"server/storage.ts":{"content":"import { type Event, type InsertEvent, type Feedback, type InsertFeedback, type SystemStatus, type InsertSystemStatus, events, feedback, systemStatus } from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, sql } from \"drizzle-orm\";\nimport { randomUUID } from \"crypto\";\nimport fs from \"fs\";\nimport path from \"path\";\n\nexport interface IStorage {\n  // Events\n  getEvents(limit?: number, category?: string): Promise<Event[]>;\n  getEventById(id: string): Promise<Event | undefined>;\n  createEvent(event: InsertEvent): Promise<Event>;\n  getEventsBySource(source: string, limit?: number): Promise<Event[]>;\n  \n  // Feedback\n  createFeedback(feedback: InsertFeedback): Promise<Feedback>;\n  getFeedbackByEventId(eventId: string): Promise<Feedback[]>;\n  \n  // System Status\n  getSystemStatus(): Promise<SystemStatus[]>;\n  updateSystemStatus(source: string, status: Partial<InsertSystemStatus>): Promise<SystemStatus>;\n  \n  // File operations\n  saveToFile(filename: string, data: any): Promise<void>;\n  loadFromFile(filename: string): Promise<any>;\n}\n\nexport class MemStorage implements IStorage {\n  private events: Map<string, Event>;\n  private feedback: Map<string, Feedback>;\n  private systemStatus: Map<string, SystemStatus>;\n  private dataDir: string;\n\n  constructor() {\n    this.events = new Map();\n    this.feedback = new Map();\n    this.systemStatus = new Map();\n    this.dataDir = path.resolve(process.cwd(), 'server/data');\n    \n    // Ensure data directory exists\n    if (!fs.existsSync(this.dataDir)) {\n      fs.mkdirSync(this.dataDir, { recursive: true });\n    }\n    \n    this.loadData();\n  }\n\n  private async loadData() {\n    try {\n      const eventsData = await this.loadFromFile('events.json');\n      if (eventsData && Array.isArray(eventsData)) {\n        eventsData.forEach((event: Event) => {\n          this.events.set(event.id, event);\n        });\n      }\n    } catch (error) {\n      console.log('No existing events data found');\n    }\n  }\n\n  private async saveEvents() {\n    const eventsArray = Array.from(this.events.values())\n      .sort((a, b) => new Date(b.archivedAt!).getTime() - new Date(a.archivedAt!).getTime())\n      .slice(0, 5000); // Keep last 5000 events\n    \n    await this.saveToFile('events.json', eventsArray);\n  }\n\n  async getEvents(limit = 50, category?: string): Promise<Event[]> {\n    const allEvents = Array.from(this.events.values())\n      .sort((a, b) => new Date(b.archivedAt!).getTime() - new Date(a.archivedAt!).getTime());\n    \n    let filtered = allEvents;\n    if (category && category !== 'all') {\n      filtered = allEvents.filter(event => event.category.toLowerCase() === category.toLowerCase());\n    }\n    \n    return filtered.slice(0, limit);\n  }\n\n  async getEventById(id: string): Promise<Event | undefined> {\n    return this.events.get(id);\n  }\n\n  async createEvent(insertEvent: InsertEvent): Promise<Event> {\n    const id = randomUUID();\n    const event: Event = {\n      ...insertEvent,\n      id,\n      archivedAt: new Date(),\n      summary: insertEvent.summary ?? null,\n      status: insertEvent.status ?? null,\n      reasons: insertEvent.reasons as string[],\n      sourceDate: insertEvent.sourceDate ?? null,\n    };\n    \n    this.events.set(id, event);\n    await this.saveEvents();\n    return event;\n  }\n\n  async getEventsBySource(source: string, limit = 50): Promise<Event[]> {\n    const sourceEvents = Array.from(this.events.values())\n      .filter(event => event.source === source)\n      .sort((a, b) => new Date(b.archivedAt!).getTime() - new Date(a.archivedAt!).getTime());\n    \n    return sourceEvents.slice(0, limit);\n  }\n\n  async createFeedback(insertFeedback: InsertFeedback): Promise<Feedback> {\n    const id = randomUUID();\n    const feedback: Feedback = {\n      ...insertFeedback,\n      id,\n      createdAt: new Date(),\n    };\n    \n    this.feedback.set(id, feedback);\n    return feedback;\n  }\n\n  async getFeedbackByEventId(eventId: string): Promise<Feedback[]> {\n    return Array.from(this.feedback.values())\n      .filter(fb => fb.eventId === eventId);\n  }\n\n  async getSystemStatus(): Promise<SystemStatus[]> {\n    return Array.from(this.systemStatus.values());\n  }\n\n  async updateSystemStatus(source: string, status: Partial<InsertSystemStatus>): Promise<SystemStatus> {\n    const existing = Array.from(this.systemStatus.values()).find(s => s.source === source);\n    \n    if (existing) {\n      const updated = { ...existing, ...status };\n      this.systemStatus.set(existing.id, updated);\n      return updated;\n    } else {\n      const id = randomUUID();\n      const newStatus: SystemStatus = {\n        id,\n        source,\n        lastSuccess: null,\n        lastError: null,\n        errorCount24h: 0,\n        lastDigestSent: null,\n        ...status,\n      };\n      this.systemStatus.set(id, newStatus);\n      return newStatus;\n    }\n  }\n\n  async saveToFile(filename: string, data: any): Promise<void> {\n    const filePath = path.join(this.dataDir, filename);\n    await fs.promises.writeFile(filePath, JSON.stringify(data, null, 2));\n  }\n\n  async loadFromFile(filename: string): Promise<any> {\n    const filePath = path.join(this.dataDir, filename);\n    const data = await fs.promises.readFile(filePath, 'utf-8');\n    return JSON.parse(data);\n  }\n}\n\nexport class DatabaseStorage implements IStorage {\n  async getEvents(limit = 50, category?: string): Promise<Event[]> {\n    if (category && category !== 'all') {\n      const result = await db\n        .select()\n        .from(events)\n        .where(eq(events.category, category))\n        .orderBy(desc(events.archivedAt))\n        .limit(limit);\n      return result;\n    }\n    \n    const result = await db\n      .select()\n      .from(events)\n      .orderBy(desc(events.archivedAt))\n      .limit(limit);\n    \n    return result;\n  }\n\n  async getEventById(id: string): Promise<Event | undefined> {\n    const [event] = await db.select().from(events).where(eq(events.id, id));\n    return event || undefined;\n  }\n\n  async createEvent(insertEvent: InsertEvent): Promise<Event> {\n    const [event] = await db\n      .insert(events)\n      .values(insertEvent)\n      .returning();\n    return event;\n  }\n\n  async getEventsBySource(source: string, limit = 50): Promise<Event[]> {\n    const result = await db\n      .select()\n      .from(events)\n      .where(eq(events.source, source))\n      .orderBy(desc(events.archivedAt))\n      .limit(limit);\n    \n    return result;\n  }\n\n  async createFeedback(insertFeedback: InsertFeedback): Promise<Feedback> {\n    const [feedbackRecord] = await db\n      .insert(feedback)\n      .values(insertFeedback)\n      .returning();\n    return feedbackRecord;\n  }\n\n  async getFeedbackByEventId(eventId: string): Promise<Feedback[]> {\n    const result = await db\n      .select()\n      .from(feedback)\n      .where(eq(feedback.eventId, eventId));\n    \n    return result;\n  }\n\n  async getSystemStatus(): Promise<SystemStatus[]> {\n    const result = await db.select().from(systemStatus);\n    return result;\n  }\n\n  async updateSystemStatus(source: string, status: Partial<InsertSystemStatus>): Promise<SystemStatus> {\n    const [existing] = await db\n      .select()\n      .from(systemStatus)\n      .where(eq(systemStatus.source, source));\n    \n    if (existing) {\n      const [updated] = await db\n        .update(systemStatus)\n        .set(status)\n        .where(eq(systemStatus.id, existing.id))\n        .returning();\n      return updated;\n    } else {\n      const [newStatus] = await db\n        .insert(systemStatus)\n        .values({ source, ...status })\n        .returning();\n      return newStatus;\n    }\n  }\n\n  async saveToFile(filename: string, data: any): Promise<void> {\n    const dataDir = path.resolve(process.cwd(), 'server/data');\n    if (!fs.existsSync(dataDir)) {\n      fs.mkdirSync(dataDir, { recursive: true });\n    }\n    const filePath = path.join(dataDir, filename);\n    await fs.promises.writeFile(filePath, JSON.stringify(data, null, 2));\n  }\n\n  async loadFromFile(filename: string): Promise<any> {\n    const dataDir = path.resolve(process.cwd(), 'server/data');\n    const filePath = path.join(dataDir, filename);\n    const data = await fs.promises.readFile(filePath, 'utf-8');\n    return JSON.parse(data);\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":8217},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, boolean, timestamp, jsonb } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Events table for storing radiology regulatory alerts\nexport const events = pgTable(\"events\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  source: text(\"source\").notNull(), // \"openFDA\", \"CMS\", \"FedReg\", \"CDPH\", \"MBC\", \"RHB\"\n  sourceId: text(\"source_id\").notNull(), // Original ID from source\n  title: text(\"title\").notNull(),\n  summary: text(\"summary\"), // AI-generated summary\n  category: text(\"category\").notNull(), // \"Urgent\", \"Informational\", \"Digest\", \"Suppressed\"\n  score: integer(\"score\").notNull(),\n  reasons: jsonb(\"reasons\").$type<string[]>().notNull(),\n  \n  // Radiology-specific fields\n  deviceName: text(\"device_name\"), // X-ray, CT, MRI, Ultrasound, etc.\n  model: text(\"model\"),\n  manufacturer: text(\"manufacturer\"),\n  classification: text(\"classification\"),\n  reason: text(\"reason\"),\n  firm: text(\"firm\"),\n  state: text(\"state\"), // Focus on California\n  status: text(\"status\"),\n  cptCodes: jsonb(\"cpt_codes\").$type<string[]>(), // Radiology CPT codes\n  delta: jsonb(\"delta\").$type<{ old: number; new: number }>(),\n  modalityType: text(\"modality_type\"), // CT, MRI, X-Ray, Ultrasound, Nuclear Medicine\n  radiologyImpact: text(\"radiology_impact\"), // High, Medium, Low\n  californiaRegion: text(\"california_region\"), // NorCal, SoCal, Central Valley, etc.\n  \n  // Metadata\n  originalData: jsonb(\"original_data\").notNull(),\n  archivedAt: timestamp(\"archived_at\").defaultNow(),\n  sourceDate: timestamp(\"source_date\"),\n});\n\n// Feedback table for storing user feedback\nexport const feedback = pgTable(\"feedback\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  eventId: varchar(\"event_id\").notNull(),\n  helpful: boolean(\"helpful\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// System status table\nexport const systemStatus = pgTable(\"system_status\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  source: text(\"source\").notNull(), // \"recalls\", \"cms_pfs\", \"fedreg\", \"cdph\", \"mbc\", \"rhb\"\n  lastSuccess: timestamp(\"last_success\"),\n  lastError: timestamp(\"last_error\"),\n  errorCount24h: integer(\"error_count_24h\").default(0),\n  lastDigestSent: timestamp(\"last_digest_sent\"),\n});\n\nexport const insertEventSchema = createInsertSchema(events).omit({\n  id: true,\n  archivedAt: true,\n});\n\nexport const insertFeedbackSchema = createInsertSchema(feedback).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertSystemStatusSchema = createInsertSchema(systemStatus).omit({\n  id: true,\n});\n\nexport type InsertEvent = z.infer<typeof insertEventSchema>;\nexport type Event = typeof events.$inferSelect;\nexport type InsertFeedback = z.infer<typeof insertFeedbackSchema>;\nexport type Feedback = typeof feedback.$inferSelect;\nexport type InsertSystemStatus = z.infer<typeof insertSystemStatusSchema>;\nexport type SystemStatus = typeof systemStatus.$inferSelect;\n\n// Response types for API endpoints\nexport const AlertResponse = z.object({\n  source: z.string(),\n  count: z.number(),\n  fetchedAt: z.string(),\n  events: z.array(z.any()),\n});\n\nexport type AlertResponse = z.infer<typeof AlertResponse>;\n","size_bytes":3304},"client/src/App-simple.tsx":{"content":"// Simple test component to debug React mounting issues\nimport { useState } from \"react\";\n\nfunction App() {\n  const [count, setCount] = useState(0);\n\n  return (\n    <div style={{ padding: '20px', fontFamily: 'Arial, sans-serif' }}>\n      <h1 style={{ color: '#333' }}>RadIntel Test App</h1>\n      <p>If you can see this, React is working correctly.</p>\n      <button \n        onClick={() => setCount(count + 1)}\n        style={{ \n          padding: '10px 20px', \n          backgroundColor: '#007bff', \n          color: 'white', \n          border: 'none',\n          borderRadius: '4px',\n          cursor: 'pointer'\n        }}\n      >\n        Count: {count}\n      </button>\n      <div style={{ marginTop: '20px', padding: '10px', backgroundColor: '#f8f9fa', border: '1px solid #dee2e6' }}>\n        <strong>Debug Info:</strong>\n        <ul>\n          <li>React is mounting: ✅</li>\n          <li>useState is working: {count > 0 ? '✅' : '⏳'}</li>\n          <li>Event handlers working: {count > 0 ? '✅' : '⏳'}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default App;","size_bytes":1084},"client/src/App.tsx":{"content":"import { Switch, Route, useLocation } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport Layout from \"@/components/layout\";\nimport Dashboard from \"@/pages/dashboard\";\nimport Alerts from \"@/pages/alerts\";\nimport Archive from \"@/pages/archive\";\nimport Tools from \"@/pages/tools\";\nimport Status from \"@/pages/status\";\nimport NotFound from \"@/pages/not-found\";\nimport { AuthPage } from \"@/pages/auth\";\nimport { useState, useEffect } from \"react\";\n\nfunction Router() {\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const [location, setLocation] = useLocation();\n\n  useEffect(() => {\n    // Check authentication status\n    fetch('/auth/me')\n      .then(res => {\n        if (res.ok) {\n          setIsAuthenticated(true);\n        } else {\n          setIsAuthenticated(false);\n          if (location !== '/auth') {\n            setLocation('/auth');\n          }\n        }\n      })\n      .catch(() => {\n        setIsAuthenticated(false);\n        if (location !== '/auth') {\n          setLocation('/auth');\n        }\n      })\n      .finally(() => setLoading(false));\n  }, [location]);\n\n  if (loading) {\n    return <div className=\"flex items-center justify-center h-screen\">Loading...</div>;\n  }\n\n  if (!isAuthenticated) {\n    return <AuthPage />;\n  }\n\n  return (\n    <Layout>\n      <Switch>\n        <Route path=\"/\" component={Dashboard} />\n        <Route path=\"/dashboard\" component={Dashboard} />\n        <Route path=\"/alerts\" component={Alerts} />\n        <Route path=\"/archive\" component={Archive} />\n        <Route path=\"/tools\" component={Tools} />\n        <Route path=\"/status\" component={Status} />\n        <Route component={NotFound} />\n      </Switch>\n    </Layout>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":2149},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(210 25% 7.8431%);\n  --card: hsl(180 6.6667% 97.0588%);\n  --card-foreground: hsl(210 25% 7.8431%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(210 25% 7.8431%);\n  --primary: hsl(203.8863 88.2845% 53.1373%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(210 25% 7.8431%);\n  --secondary-foreground: hsl(0 0% 100%);\n  --muted: hsl(240 1.9608% 90%);\n  --muted-foreground: hsl(210 25% 7.8431%);\n  --accent: hsl(211.5789 51.3514% 92.7451%);\n  --accent-foreground: hsl(203.8863 88.2845% 53.1373%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(201.4286 30.4348% 90.9804%);\n  --input: hsl(200 23.0769% 97.4510%);\n  --ring: hsl(202.8169 89.1213% 53.1373%);\n  --chart-1: hsl(203.8863 88.2845% 53.1373%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(180 6.6667% 97.0588%);\n  --sidebar-foreground: hsl(210 25% 7.8431%);\n  --sidebar-primary: hsl(203.8863 88.2845% 53.1373%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(211.5789 51.3514% 92.7451%);\n  --sidebar-accent-foreground: hsl(203.8863 88.2845% 53.1373%);\n  --sidebar-border: hsl(205.0000 25.0000% 90.5882%);\n  --sidebar-ring: hsl(202.8169 89.1213% 53.1373%);\n  --font-sans: Open Sans, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(0 0% 0%);\n  --foreground: hsl(200 6.6667% 91.1765%);\n  --card: hsl(228 9.8039% 10%);\n  --card-foreground: hsl(0 0% 85.0980%);\n  --popover: hsl(0 0% 0%);\n  --popover-foreground: hsl(200 6.6667% 91.1765%);\n  --primary: hsl(203.7736 87.6033% 52.5490%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(195.0000 15.3846% 94.9020%);\n  --secondary-foreground: hsl(210 25% 7.8431%);\n  --muted: hsl(0 0% 9.4118%);\n  --muted-foreground: hsl(210 3.3898% 46.2745%);\n  --accent: hsl(205.7143 70% 7.8431%);\n  --accent-foreground: hsl(203.7736 87.6033% 52.5490%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(210 5.2632% 14.9020%);\n  --input: hsl(207.6923 27.6596% 18.4314%);\n  --ring: hsl(202.8169 89.1213% 53.1373%);\n  --chart-1: hsl(203.8863 88.2845% 53.1373%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(228 9.8039% 10%);\n  --sidebar-foreground: hsl(0 0% 85.0980%);\n  --sidebar-primary: hsl(202.8169 89.1213% 53.1373%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(205.7143 70% 7.8431%);\n  --sidebar-accent-foreground: hsl(203.7736 87.6033% 52.5490%);\n  --sidebar-border: hsl(205.7143 15.7895% 26.0784%);\n  --sidebar-ring: hsl(202.8169 89.1213% 53.1373%);\n  --font-sans: Open Sans, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}","size_bytes":5055},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"server/lib/ai-gemini.ts":{"content":"import { GoogleGenAI } from \"@google/genai\";\n\nconst ai = new GoogleGenAI({ \n  apiKey: process.env.GEMINI_API_KEY || process.env.VITE_GEMINI_API_KEY || \"\" \n});\n\nexport interface NormalizedDataItem {\n  id: string;\n  source: string;\n  date: string;\n  title: string;\n  device_name: string | null;\n  model: string | null;\n  classification: string | null;\n  reason: string | null;\n  firm: string | null;\n  manufacturer: string | null;\n  state: string | null;\n  status: string | null;\n  codes: string[] | null;\n  delta: { old: number; new: number } | null;\n  match: { exact_model: boolean; fuzzy_model: boolean };\n  flags: { maude_signal: boolean; manufacturer_notice: boolean };\n  sources: string[];\n}\n\nexport interface PatternDetectionResult {\n  flags: {\n    maude_signal: boolean;\n    manufacturer_notice: boolean;\n    recall_risk: boolean;\n    financial_impact: boolean;\n  };\n  match: {\n    exact_model: boolean;\n    fuzzy_model: boolean;\n    device_category: boolean;\n  };\n  confidence: number;\n}\n\nexport async function normalizeData(rawData: any, source: string): Promise<NormalizedDataItem[]> {\n  try {\n    const systemPrompt = `You are a data normalization expert for regulatory intelligence.\n    \nGiven raw data from ${source}, return a strictly normalized JSON array with these required fields:\n- id: string (use original ID or generate one)\n- source: string (${source})\n- date: string (ISO date)\n- title: string\n- device_name: string|null\n- model: string|null\n- classification: string|null\n- reason: string|null\n- firm: string|null\n- manufacturer: string|null\n- state: string|null\n- status: string|null\n- codes: string[]|null (CPT codes if CMS)\n- delta: {old: number, new: number}|null (if CMS pricing change)\n- match: {exact_model: boolean, fuzzy_model: boolean}\n- flags: {maude_signal: boolean, manufacturer_notice: boolean}\n- sources: string[] (e.g., [\"openfda:enforcement\"], [\"cms:pfs_change\"])\n\nRules:\n- Return ONLY valid JSON array, no prose\n- Never invent values; use null if unknown\n- For CMS data, detect price changes and populate delta\n- Set flags based on content analysis\n- Normalize device names and models consistently`;\n\n    const response = await ai.models.generateContent({\n      model: \"gemini-2.5-flash\",\n      config: {\n        systemInstruction: systemPrompt,\n        responseMimeType: \"application/json\",\n      },\n      contents: JSON.stringify(rawData),\n    });\n\n    const normalized = JSON.parse(response.text);\n    return Array.isArray(normalized) ? normalized : [normalized];\n  } catch (error) {\n    console.error('Gemini normalization error:', error);\n    throw new Error(`Failed to normalize data: ${error.message}`);\n  }\n}\n\nexport async function detectPatterns(event: any): Promise<PatternDetectionResult> {\n  try {\n    const systemPrompt = `Analyze this regulatory event and return JSON with pattern detection:\n    \n{\n  \"flags\": {\n    \"maude_signal\": boolean,\n    \"manufacturer_notice\": boolean,\n    \"recall_risk\": boolean,\n    \"financial_impact\": boolean\n  },\n  \"match\": {\n    \"exact_model\": boolean,\n    \"fuzzy_model\": boolean,\n    \"device_category\": boolean\n  },\n  \"confidence\": number (0-100)\n}\n\nLook for:\n- MAUDE database references or adverse event signals\n- Official manufacturer communications\n- Specific device model mentions\n- Financial/pricing implications`;\n\n    const response = await ai.models.generateContent({\n      model: \"gemini-2.5-flash\",\n      config: {\n        systemInstruction: systemPrompt,\n        responseMimeType: \"application/json\",\n        responseSchema: {\n          type: \"object\",\n          properties: {\n            flags: {\n              type: \"object\",\n              properties: {\n                maude_signal: { type: \"boolean\" },\n                manufacturer_notice: { type: \"boolean\" },\n                recall_risk: { type: \"boolean\" },\n                financial_impact: { type: \"boolean\" }\n              }\n            },\n            match: {\n              type: \"object\", \n              properties: {\n                exact_model: { type: \"boolean\" },\n                fuzzy_model: { type: \"boolean\" },\n                device_category: { type: \"boolean\" }\n              }\n            },\n            confidence: { type: \"number\" }\n          }\n        }\n      },\n      contents: JSON.stringify(event),\n    });\n\n    return JSON.parse(response.text);\n  } catch (error) {\n    console.error('Pattern detection error:', error);\n    return {\n      flags: { maude_signal: false, manufacturer_notice: false, recall_risk: false, financial_impact: false },\n      match: { exact_model: false, fuzzy_model: false, device_category: false },\n      confidence: 0\n    };\n  }\n}\n","size_bytes":4632},"server/lib/ai-perplexity.ts":{"content":"export interface EventToSummarize {\n  id: string;\n  title: string;\n  source: string;\n  device_name?: string | null;\n  manufacturer?: string | null;\n  reason?: string | null;\n  classification?: string | null;\n}\n\nexport interface SummaryResult {\n  eventId: string;\n  summary: string;\n}\n\nexport async function summarizeEvent(event: EventToSummarize): Promise<string> {\n  try {\n    const response = await fetch('https://api.perplexity.ai/chat/completions', {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${process.env.PERPLEXITY_API_KEY || process.env.VITE_PERPLEXITY_API_KEY}`,\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        model: 'llama-3.1-sonar-small-128k-online',\n        messages: [\n          {\n            role: 'system',\n            content: 'You are an expert medical regulatory analyst. Create clear, actionable 1-2 sentence summaries for radiology clinic staff. Focus on immediate impact and required actions. Be precise and clinic-ready.'\n          },\n          {\n            role: 'user',\n            content: `Summarize this regulatory event for a radiology clinic:\n\nTitle: ${event.title}\nSource: ${event.source}\nDevice: ${event.device_name || 'N/A'}\nManufacturer: ${event.manufacturer || 'N/A'}\nReason: ${event.reason || 'N/A'}\nClassification: ${event.classification || 'N/A'}\n\nCreate a clinic-ready alert in 1-2 sentences that explains the impact and any required actions.`\n          }\n        ],\n        temperature: 0.2,\n        max_tokens: 150,\n        return_related_questions: false,\n        stream: false\n      })\n    });\n\n    if (!response.ok) {\n      throw new Error(`Perplexity API error: ${response.status}`);\n    }\n\n    const data = await response.json();\n    return data.choices[0]?.message?.content || 'Summary unavailable';\n  } catch (error) {\n    console.error('Perplexity summarization error:', error);\n    return `${event.title.substring(0, 100)}${event.title.length > 100 ? '...' : ''}`;\n  }\n}\n\nexport async function batchSummarize(events: EventToSummarize[]): Promise<SummaryResult[]> {\n  const summaries = [];\n  \n  for (const event of events) {\n    try {\n      const summary = await summarizeEvent(event);\n      summaries.push({ eventId: event.id, summary });\n      \n      // Rate limiting - wait 1 second between requests\n      await new Promise(resolve => setTimeout(resolve, 1000));\n    } catch (error) {\n      console.error(`Failed to summarize event ${event.id}:`, error);\n      summaries.push({ \n        eventId: event.id, \n        summary: `${event.title.substring(0, 100)}${event.title.length > 100 ? '...' : ''}` \n      });\n    }\n  }\n  \n  return summaries;\n}\n","size_bytes":2671},"server/lib/email.ts":{"content":"export interface EmailOptions {\n  to: string | string[];\n  subject: string;\n  html: string;\n  text: string;\n}\n\nexport interface EmailResult {\n  success: boolean;\n  messageId?: string;\n  error?: string;\n}\n\nexport interface AlertForEmail {\n  id: string;\n  title: string;\n  summary: string | null;\n  category: string;\n  score: number;\n  source: string;\n}\n\nexport async function sendEmail({ to, subject, html, text }: EmailOptions): Promise<EmailResult> {\n  const apiKey = process.env.EMAIL_API_KEY || process.env.VITE_EMAIL_API_KEY;\n  const fromEmail = process.env.EMAIL_FROM || process.env.VITE_EMAIL_FROM || 'alerts@radintel.app';\n  \n  if (!apiKey) {\n    console.warn('EMAIL_API_KEY not configured, skipping email send');\n    return { success: false, error: 'Email service not configured' };\n  }\n\n  try {\n    // Using a generic email service API format\n    // This can be adapted for SendGrid, Mailgun, Brevo, etc.\n    const response = await fetch('https://api.emailprovider.com/v1/send', {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${apiKey}`,\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        from: fromEmail,\n        to: Array.isArray(to) ? to : [to],\n        subject,\n        html,\n        text,\n      }),\n    });\n\n    if (!response.ok) {\n      throw new Error(`Email API error: ${response.status}`);\n    }\n\n    const result = await response.json();\n    return { success: true, messageId: result.id || result.messageId };\n  } catch (error) {\n    console.error('Email sending error:', error);\n    return { success: false, error: error instanceof Error ? error.message : 'Unknown error' };\n  }\n}\n\nexport async function sendAlertEmail(alerts: AlertForEmail[], recipients: string[]): Promise<EmailResult> {\n  if (!alerts.length || !recipients.length) {\n    return { success: false, error: 'No alerts or recipients provided' };\n  }\n\n  const urgentAlerts = alerts.filter(alert => alert.category === 'Urgent');\n  const infoAlerts = alerts.filter(alert => alert.category === 'Informational');\n  \n  const subject = urgentAlerts.length > 0 \n    ? `🚨 URGENT: ${urgentAlerts.length} Critical Radiology Alert${urgentAlerts.length > 1 ? 's' : ''}`\n    : `📋 Radiology Intelligence Update - ${alerts.length} New Alert${alerts.length > 1 ? 's' : ''}`;\n\n  const html = generateEmailHTML(alerts, urgentAlerts, infoAlerts);\n  const text = generateEmailText(alerts, urgentAlerts, infoAlerts);\n\n  return await sendEmail({\n    to: recipients,\n    subject,\n    html,\n    text,\n  });\n}\n\nfunction generateEmailHTML(alerts: AlertForEmail[], urgentAlerts: AlertForEmail[], infoAlerts: AlertForEmail[]): string {\n  const urgentSection = urgentAlerts.length > 0 ? `\n    <div style=\"background: #fef2f2; border-left: 4px solid #ef4444; padding: 16px; margin: 16px 0;\">\n      <h2 style=\"color: #dc2626; margin: 0 0 12px 0;\">🚨 URGENT ALERTS</h2>\n      ${urgentAlerts.map(alert => `\n        <div style=\"margin-bottom: 12px; padding-bottom: 12px; border-bottom: 1px solid #fecaca;\">\n          <h3 style=\"margin: 0; color: #991b1b;\">${alert.title}</h3>\n          <p style=\"margin: 4px 0; color: #7f1d1d;\">${alert.summary || 'No summary available'}</p>\n          <small style=\"color: #991b1b;\">Score: ${alert.score} | Source: ${alert.source}</small>\n        </div>\n      `).join('')}\n    </div>\n  ` : '';\n\n  const infoSection = infoAlerts.length > 0 ? `\n    <div style=\"background: #fffbeb; border-left: 4px solid #f59e0b; padding: 16px; margin: 16px 0;\">\n      <h2 style=\"color: #d97706; margin: 0 0 12px 0;\">📋 INFORMATIONAL ALERTS</h2>\n      ${infoAlerts.map(alert => `\n        <div style=\"margin-bottom: 12px; padding-bottom: 12px; border-bottom: 1px solid #fed7aa;\">\n          <h3 style=\"margin: 0; color: #92400e;\">${alert.title}</h3>\n          <p style=\"margin: 4px 0; color: #78350f;\">${alert.summary || 'No summary available'}</p>\n          <small style=\"color: #92400e;\">Score: ${alert.score} | Source: ${alert.source}</small>\n        </div>\n      `).join('')}\n    </div>\n  ` : '';\n\n  return `\n    <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n      <div style=\"background: #1e40af; color: white; padding: 20px; text-align: center;\">\n        <h1 style=\"margin: 0;\">RadIntel Alert System</h1>\n        <p style=\"margin: 8px 0 0 0;\">Regulatory Intelligence for Radiology</p>\n      </div>\n      \n      ${urgentSection}\n      ${infoSection}\n      \n      <div style=\"background: #f9fafb; padding: 16px; margin: 16px 0; text-align: center;\">\n        <p style=\"margin: 0; color: #6b7280;\">\n          View full dashboard at <a href=\"${process.env.REPLIT_DEV_DOMAIN || 'your-domain.com'}/dashboard\">RadIntel Dashboard</a>\n        </p>\n      </div>\n    </div>\n  `;\n}\n\nfunction generateEmailText(alerts: AlertForEmail[], urgentAlerts: AlertForEmail[], infoAlerts: AlertForEmail[]): string {\n  let text = 'RadIntel Alert System - Regulatory Intelligence\\n\\n';\n  \n  if (urgentAlerts.length > 0) {\n    text += '🚨 URGENT ALERTS\\n';\n    text += '=================\\n\\n';\n    urgentAlerts.forEach(alert => {\n      text += `${alert.title}\\n`;\n      text += `${alert.summary || 'No summary available'}\\n`;\n      text += `Score: ${alert.score} | Source: ${alert.source}\\n\\n`;\n    });\n  }\n  \n  if (infoAlerts.length > 0) {\n    text += '📋 INFORMATIONAL ALERTS\\n';\n    text += '========================\\n\\n';\n    infoAlerts.forEach(alert => {\n      text += `${alert.title}\\n`;\n      text += `${alert.summary || 'No summary available'}\\n`;\n      text += `Score: ${alert.score} | Source: ${alert.source}\\n\\n`;\n    });\n  }\n  \n  text += `View full dashboard: ${process.env.REPLIT_DEV_DOMAIN || 'your-domain.com'}/dashboard\\n`;\n  \n  return text;\n}\n","size_bytes":5715},"server/lib/score.ts":{"content":"export interface ScoringResult {\n  score: number;\n  reasons: string[];\n}\n\nexport interface EventForScoring {\n  sources: string[];\n  flags?: {\n    manufacturer_notice?: boolean;\n    maude_signal?: boolean;\n    california_mandate?: boolean;\n    radiation_safety?: boolean;\n  };\n  match?: {\n    exact_model?: boolean;\n    fuzzy_model?: boolean;\n  };\n  delta?: {\n    old: number;\n    new: number;\n  } | null;\n  modalityType?: string;\n  californiaRegion?: string;\n  radiologyImpact?: string;\n}\n\nexport function scoreEvent(event: EventForScoring): ScoringResult {\n  let score = 0;\n  const reasons: string[] = [];\n\n  // Source-based scoring\n  if (event.sources.includes('openfda:enforcement')) {\n    score += 60;\n    reasons.push('FDA enforcement action');\n  }\n\n  if (event.sources.includes('cms:pfs_change')) {\n    score += 70;\n    reasons.push('Official CMS payment change');\n  }\n\n  // California state source scoring\n  if (event.sources.includes('cdph')) {\n    score += 65;\n    reasons.push('California Department of Public Health alert');\n  }\n\n  if (event.sources.includes('rhb')) {\n    score += 70;\n    reasons.push('California Radiologic Health Branch requirement');\n  }\n\n  // Flag-based scoring\n  if (event.flags?.manufacturer_notice) {\n    score += 20;\n    reasons.push('Manufacturer notice present');\n  }\n\n  if (event.flags?.maude_signal) {\n    score += 10;\n    reasons.push('MAUDE signal detected');\n  }\n\n  if (event.flags?.california_mandate) {\n    score += 25;\n    reasons.push('California state mandate');\n  }\n\n  if (event.flags?.radiation_safety) {\n    score += 30;\n    reasons.push('Radiation safety requirement');\n  }\n\n  // Match-based scoring\n  if (event.match?.exact_model) {\n    score += 20;\n    reasons.push('Exact device model match');\n  }\n\n  if (event.match?.fuzzy_model) {\n    score += 10;\n    reasons.push('Fuzzy device model match');\n  }\n\n  // Radiology modality-specific scoring\n  const criticalModalities = [\"CT\", \"MRI\", \"Nuclear Medicine\", \"Mammography\"];\n  if (event.modalityType && criticalModalities.includes(event.modalityType)) {\n    score += 15;\n    reasons.push(`Critical radiology modality: ${event.modalityType}`);\n  }\n\n  // California region boost for major areas\n  const majorCaliforniaRegions = [\"Bay Area\", \"Greater LA\", \"San Diego\"];\n  if (event.californiaRegion && majorCaliforniaRegions.includes(event.californiaRegion)) {\n    score += 5;\n    reasons.push(`Major California market: ${event.californiaRegion}`);\n  }\n\n  // Financial impact boost\n  if (event.delta && Math.abs(event.delta.new - event.delta.old) > 50) {\n    score += 15;\n    reasons.push('Significant financial impact');\n  }\n\n  // Radiology impact scoring\n  if (event.radiologyImpact === \"High\") {\n    score += 10;\n    reasons.push('High radiology impact');\n  }\n\n  return { score, reasons };\n}\n\nexport function categorizeByScore(score: number): string {\n  if (score >= 85) return 'Urgent';\n  if (score >= 75) return 'Informational';\n  if (score >= 50) return 'Digest';\n  return 'Suppressed';\n}\n\nexport function shouldSummarize(category: string): boolean {\n  return category === 'Urgent' || category === 'Informational';\n}\n","size_bytes":3122},"server/lib/sms.ts":{"content":"export interface SMSOptions {\n  to: string;\n  text: string;\n}\n\nexport interface SMSResult {\n  success: boolean;\n  messageId?: string;\n  error?: string;\n}\n\nexport interface SMSResultWithPhone extends SMSResult {\n  phone: string;\n}\n\nexport interface AlertForSMS {\n  id: string;\n  title: string;\n}\n\nexport async function sendSMS({ to, text }: SMSOptions): Promise<SMSResult> {\n  const accountSid = process.env.TWILIO_SID || process.env.VITE_TWILIO_SID;\n  const authToken = process.env.TWILIO_TOKEN || process.env.VITE_TWILIO_TOKEN;\n  const fromNumber = process.env.TWILIO_FROM || process.env.VITE_TWILIO_FROM;\n\n  if (!accountSid || !authToken || !fromNumber) {\n    console.warn('Twilio credentials not configured, skipping SMS send');\n    return { success: false, error: 'SMS service not configured' };\n  }\n\n  try {\n    const auth = Buffer.from(`${accountSid}:${authToken}`).toString('base64');\n    \n    const response = await fetch(`https://api.twilio.com/2010-04-01/Accounts/${accountSid}/Messages.json`, {\n      method: 'POST',\n      headers: {\n        'Authorization': `Basic ${auth}`,\n        'Content-Type': 'application/x-www-form-urlencoded',\n      },\n      body: new URLSearchParams({\n        From: fromNumber,\n        To: to,\n        Body: text,\n      }),\n    });\n\n    if (!response.ok) {\n      throw new Error(`Twilio API error: ${response.status}`);\n    }\n\n    const result = await response.json();\n    return { success: true, messageId: result.sid };\n  } catch (error) {\n    console.error('SMS sending error:', error);\n    return { success: false, error: error.message };\n  }\n}\n\nexport async function sendUrgentSMS(alert: AlertForSMS, phoneNumbers: string[]): Promise<SMSResultWithPhone[]> {\n  if (!phoneNumbers.length) {\n    return { success: false, error: 'No phone numbers provided' };\n  }\n\n  const text = `🚨 URGENT RadIntel Alert: ${alert.title.substring(0, 100)}${alert.title.length > 100 ? '...' : ''}\\n\\nView details: ${process.env.REPLIT_DEV_DOMAIN || 'your-domain.com'}/dashboard`;\n\n  const results = [];\n  for (const phone of phoneNumbers) {\n    const result = await sendSMS({ to: phone, text });\n    results.push({ phone, ...result });\n  }\n\n  return results;\n}\n","size_bytes":2185},"client/src/components/alert-card.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Collapsible, CollapsibleContent, CollapsibleTrigger } from \"@/components/ui/collapsible\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { api } from \"@/lib/api\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { \n  Building, \n  Calendar, \n  DollarSign, \n  ChevronRight, \n  ThumbsUp, \n  ThumbsDown,\n  Scan,\n  MapPin,\n  AlertTriangle\n} from \"lucide-react\";\nimport type { Event } from \"@/types\";\n\ninterface AlertCardProps {\n  event: Event;\n}\n\nexport default function AlertCard({ event }: AlertCardProps) {\n  const [isExpanded, setIsExpanded] = useState(false);\n  const [feedbackSubmitted, setFeedbackSubmitted] = useState(false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const feedbackMutation = useMutation({\n    mutationFn: (helpful: boolean) => api.submitFeedback(event.id, helpful),\n    onSuccess: () => {\n      setFeedbackSubmitted(true);\n      toast({\n        title: \"Feedback submitted\",\n        description: \"Thank you for your feedback!\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to submit feedback. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const getCategoryColor = (category: string) => {\n    switch (category) {\n      case 'Urgent':\n        return 'bg-red-100 text-red-800';\n      case 'Informational':\n        return 'bg-amber-100 text-amber-800';\n      case 'Digest':\n        return 'bg-blue-100 text-blue-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const getSourceColor = (source: string) => {\n    switch (source) {\n      case 'openFDA':\n        return 'bg-blue-100 text-blue-800';\n      case 'CMS':\n        return 'bg-green-100 text-green-800';\n      case 'Federal Register':\n        return 'bg-purple-100 text-purple-800';\n      case 'CDPH':\n        return 'bg-orange-100 text-orange-800';\n      case 'RHB':\n        return 'bg-red-100 text-red-800';\n      case 'MBC':\n        return 'bg-indigo-100 text-indigo-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const getBorderColor = (category: string) => {\n    switch (category) {\n      case 'Urgent':\n        return 'border-l-red-500';\n      case 'Informational':\n        return 'border-l-amber-500';\n      case 'Digest':\n        return 'border-l-blue-500';\n      default:\n        return 'border-l-gray-500';\n    }\n  };\n\n  const formatFinancialImpact = (delta: { old: number; new: number } | null) => {\n    if (!delta) return null;\n    \n    const impact = delta.new - delta.old;\n    const sign = impact >= 0 ? '+' : '';\n    const color = impact >= 0 ? 'text-green-600' : 'text-red-600';\n    \n    return (\n      <span className={`font-medium ${color}`}>\n        {sign}${Math.abs(impact).toFixed(2)}/month\n      </span>\n    );\n  };\n\n  const formatDate = (date: Date | string | null) => {\n    if (!date) return 'Unknown';\n    const dateObj = typeof date === 'string' ? new Date(date) : date;\n    return dateObj.toLocaleDateString('en-US', { \n      month: 'short', \n      day: 'numeric', \n      year: 'numeric' \n    });\n  };\n\n  const formatTimeAgo = (date: Date | string | null) => {\n    if (!date) return 'Unknown';\n    const dateObj = typeof date === 'string' ? new Date(date) : date;\n    const now = new Date();\n    const diffMs = now.getTime() - dateObj.getTime();\n    const diffHours = Math.floor(diffMs / (1000 * 60 * 60));\n    const diffDays = Math.floor(diffHours / 24);\n    \n    if (diffHours < 1) return 'Just now';\n    if (diffHours < 24) return `${diffHours} hour${diffHours > 1 ? 's' : ''} ago`;\n    if (diffDays < 7) return `${diffDays} day${diffDays > 1 ? 's' : ''} ago`;\n    return formatDate(dateObj);\n  };\n\n  return (\n    <Card className={`border-l-4 ${getBorderColor(event.category)} border-r border-b border-t border-gray-200`}>\n      <CardContent className=\"p-6\">\n        <div className=\"flex items-start justify-between\">\n          <div className=\"flex-1\">\n            <div className=\"flex items-center space-x-3 mb-3\">\n              <Badge className={getCategoryColor(event.category)}>\n                {event.category.toUpperCase()}\n              </Badge>\n              <Badge className={getSourceColor(event.source)}>\n                {event.source === 'openFDA' ? 'FDA RECALL' : \n                 event.source === 'CMS' ? 'CMS PFS' : \n                 event.source === 'CDPH' ? 'CA HEALTH' :\n                 event.source === 'RHB' ? 'CA RADIOLOGY' :\n                 event.source === 'MBC' ? 'CA MEDICAL BOARD' :\n                 'FEDERAL'}\n              </Badge>\n              {event.modalityType && (\n                <Badge variant=\"outline\" className=\"flex items-center gap-1\">\n                  <Scan className=\"h-3 w-3\" />\n                  {event.modalityType}\n                </Badge>\n              )}\n              <span className=\"text-sm text-gray-500\">{formatTimeAgo(event.archivedAt)}</span>\n              <div className=\"flex items-center space-x-1\">\n                <div className={`w-2 h-2 rounded-full ${\n                  event.category === 'Urgent' ? 'bg-red-500' : \n                  event.category === 'Informational' ? 'bg-amber-500' : 'bg-blue-500'\n                }`} />\n                <span className=\"text-xs text-gray-600\">Score: {event.score}</span>\n              </div>\n            </div>\n            \n            <h4 className=\"text-lg font-semibold text-gray-900 mb-2\">\n              {event.title}\n            </h4>\n            \n            {event.summary && (\n              <p className=\"text-gray-700 mb-3\">\n                {event.summary}\n              </p>\n            )}\n            \n            <div className=\"flex items-center space-x-6 text-sm text-gray-600\">\n              {event.manufacturer && (\n                <div className=\"flex items-center space-x-1\">\n                  <Building className=\"h-4 w-4\" />\n                  <span>{event.manufacturer}</span>\n                </div>\n              )}\n              {event.californiaRegion && (\n                <div className=\"flex items-center space-x-1\">\n                  <MapPin className=\"h-4 w-4\" />\n                  <span>{event.californiaRegion}</span>\n                </div>\n              )}\n              {event.radiologyImpact && (\n                <div className=\"flex items-center space-x-1\">\n                  <AlertTriangle className={`h-4 w-4 ${\n                    event.radiologyImpact === 'High' ? 'text-red-600' :\n                    event.radiologyImpact === 'Medium' ? 'text-amber-600' :\n                    'text-green-600'\n                  }`} />\n                  <span className={\n                    event.radiologyImpact === 'High' ? 'text-red-600 font-medium' :\n                    event.radiologyImpact === 'Medium' ? 'text-amber-600' :\n                    ''\n                  }>\n                    {event.radiologyImpact} Impact\n                  </span>\n                </div>\n              )}\n              {event.sourceDate && (\n                <div className=\"flex items-center space-x-1\">\n                  <Calendar className=\"h-4 w-4\" />\n                  <span>{formatDate(event.sourceDate)}</span>\n                </div>\n              )}\n              <div className=\"flex items-center space-x-1\">\n                <DollarSign className=\"h-4 w-4\" />\n                {formatFinancialImpact(event.delta) || <span className=\"text-gray-600\">Impact TBD</span>}\n              </div>\n            </div>\n          </div>\n          \n          <div className=\"flex flex-col space-y-2 ml-6\">\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => feedbackMutation.mutate(true)}\n              disabled={feedbackSubmitted || feedbackMutation.isPending}\n              className=\"bg-green-50 text-green-700 hover:bg-green-100 border-green-200\"\n            >\n              <ThumbsUp className=\"h-3 w-3 mr-1\" />\n              Helpful\n            </Button>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => feedbackMutation.mutate(false)}\n              disabled={feedbackSubmitted || feedbackMutation.isPending}\n              className=\"hover:bg-gray-100\"\n            >\n              <ThumbsDown className=\"h-3 w-3 mr-1\" />\n              Not Helpful\n            </Button>\n          </div>\n        </div>\n        \n        <div className=\"mt-4 pt-4 border-t border-gray-100\">\n          <Collapsible open={isExpanded} onOpenChange={setIsExpanded}>\n            <CollapsibleTrigger asChild>\n              <Button \n                variant=\"ghost\" \n                size=\"sm\"\n                className=\"text-primary hover:text-primary/80 p-0 h-auto\"\n              >\n                <ChevronRight className={`h-4 w-4 mr-2 transition-transform ${isExpanded ? 'rotate-90' : ''}`} />\n                View Details & Sources\n              </Button>\n            </CollapsibleTrigger>\n            <CollapsibleContent className=\"mt-3\">\n              <div className=\"text-sm text-gray-600 bg-gray-50 rounded-lg p-4\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <strong>Source:</strong> {event.source}<br />\n                    <strong>Event ID:</strong> {event.sourceId}<br />\n                    {event.classification && (\n                      <>\n                        <strong>Classification:</strong> {event.classification}<br />\n                      </>\n                    )}\n                    {event.reasons.length > 0 && (\n                      <>\n                        <strong>Scoring Reasons:</strong><br />\n                        <ul className=\"list-disc list-inside mt-1\">\n                          {event.reasons.map((reason, index) => (\n                            <li key={index}>{reason}</li>\n                          ))}\n                        </ul>\n                      </>\n                    )}\n                  </div>\n                  <div>\n                    {event.deviceName && (\n                      <>\n                        <strong>Device:</strong> {event.deviceName}<br />\n                      </>\n                    )}\n                    {event.model && (\n                      <>\n                        <strong>Model:</strong> {event.model}<br />\n                      </>\n                    )}\n                    {event.reason && (\n                      <>\n                        <strong>Reason:</strong> {event.reason}<br />\n                      </>\n                    )}\n                    {event.cptCodes && event.cptCodes.length > 0 && (\n                      <>\n                        <strong>CPT Codes:</strong> {event.cptCodes.join(', ')}<br />\n                      </>\n                    )}\n                    {event.delta && (\n                      <>\n                        <strong>Rate Change:</strong> ${event.delta.old} → ${event.delta.new}<br />\n                      </>\n                    )}\n                  </div>\n                </div>\n              </div>\n            </CollapsibleContent>\n          </Collapsible>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":11346},"client/src/components/filter-controls.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Filter } from \"lucide-react\";\nimport type { FilterState } from \"@/types\";\n\ninterface FilterControlsProps {\n  onFilterChange: (filters: FilterState) => void;\n  urgentCount: number;\n  infoCount: number;\n  digestCount: number;\n}\n\nexport default function FilterControls({ \n  onFilterChange, \n  urgentCount, \n  infoCount, \n  digestCount \n}: FilterControlsProps) {\n  const [filters, setFilters] = useState<FilterState>({\n    category: 'all',\n    source: 'all',\n    dateRange: 'all'\n  });\n\n  const handleCategoryChange = (category: FilterState['category']) => {\n    const newFilters = { ...filters, category };\n    setFilters(newFilters);\n    onFilterChange(newFilters);\n  };\n\n  const handleSourceChange = (source: string) => {\n    const newFilters = { ...filters, source: source as FilterState['source'] };\n    setFilters(newFilters);\n    onFilterChange(newFilters);\n  };\n\n  const categoryButtons = [\n    { key: 'urgent', label: `Urgent (${urgentCount})`, active: filters.category === 'urgent', variant: 'urgent' },\n    { key: 'informational', label: `Informational (${infoCount})`, active: filters.category === 'informational', variant: 'info' },\n    { key: 'digest', label: `Digest (${digestCount})`, active: filters.category === 'digest', variant: 'digest' },\n    { key: 'all', label: 'All', active: filters.category === 'all', variant: 'default' },\n  ];\n\n  return (\n    <div className=\"bg-white rounded-xl shadow-sm border border-gray-200 p-6\">\n      <div className=\"flex flex-col sm:flex-row items-start sm:items-center justify-between space-y-4 sm:space-y-0\">\n        <h3 className=\"text-lg font-semibold text-gray-900\">Recent Alerts</h3>\n        <div className=\"flex flex-wrap items-center gap-3\">\n          <div className=\"flex space-x-2\">\n            {categoryButtons.map((button) => (\n              <Button\n                key={button.key}\n                variant={button.active ? \"default\" : \"outline\"}\n                size=\"sm\"\n                onClick={() => handleCategoryChange(button.key as FilterState['category'])}\n                className={\n                  button.active && button.variant === 'urgent'\n                    ? \"bg-red-100 text-red-800 hover:bg-red-200 border-red-200\"\n                    : button.active && button.variant === 'info'\n                    ? \"bg-amber-100 text-amber-800 hover:bg-amber-200 border-amber-200\"\n                    : button.active && button.variant === 'digest'\n                    ? \"bg-blue-100 text-blue-800 hover:bg-blue-200 border-blue-200\"\n                    : \"\"\n                }\n              >\n                {button.label}\n              </Button>\n            ))}\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <Filter className=\"h-4 w-4 text-gray-400\" />\n            <Select value={filters.source} onValueChange={handleSourceChange}>\n              <SelectTrigger className=\"w-40\">\n                <SelectValue placeholder=\"All Sources\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Sources</SelectItem>\n                <SelectItem value=\"openFDA\">FDA Recalls</SelectItem>\n                <SelectItem value=\"CMS\">CMS PFS</SelectItem>\n                <SelectItem value=\"Federal Register\">Federal Register</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":3596},"client/src/components/impact-calculator.tsx":{"content":"import { useState, useMemo } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { localStorage } from \"@/lib/localStorage\";\nimport { Plus, Trash2, Download, Upload } from \"lucide-react\";\nimport type { CPTVolume, ImpactCalculation } from \"@/types\";\n\nexport default function ImpactCalculator() {\n  const [cptVolumes, setCPTVolumes] = useState<CPTVolume[]>(() => localStorage.getCPTVolumes());\n  const [newCPT, setNewCPT] = useState({ code: '', volume: '' });\n  const { toast } = useToast();\n\n  // Sample rate changes for demonstration\n  const recentRateChanges = useMemo(() => ({\n    '70553': { old: 287.45, new: 296.65 },\n    '70552': { old: 245.32, new: 245.32 },\n    '70551': { old: 189.87, new: 195.23 },\n    '70450': { old: 156.43, new: 158.91 },\n    '70460': { old: 198.76, new: 201.45 },\n    '70470': { old: 234.21, new: 238.12 },\n    '72148': { old: 312.45, new: 318.67 },\n    '72149': { old: 389.12, new: 394.23 },\n    '72158': { old: 445.67, new: 451.89 },\n    '73721': { old: 278.90, new: 282.45 },\n    '73722': { old: 334.55, new: 339.12 },\n  }), []);\n\n  const addCPTVolume = () => {\n    if (!newCPT.code || !newCPT.volume) {\n      toast({\n        title: \"Missing information\",\n        description: \"Please enter both CPT code and volume.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const volume: CPTVolume = {\n      code: newCPT.code.toUpperCase(),\n      volume: parseInt(newCPT.volume),\n      description: getCPTDescription(newCPT.code)\n    };\n\n    const updated = [...cptVolumes.filter(v => v.code !== volume.code), volume];\n    setCPTVolumes(updated);\n    localStorage.setCPTVolumes(updated);\n    setNewCPT({ code: '', volume: '' });\n\n    toast({\n      title: \"CPT volume added\",\n      description: `Added ${volume.code} with ${volume.volume} procedures/month.`,\n    });\n  };\n\n  const removeCPTVolume = (code: string) => {\n    const updated = cptVolumes.filter(v => v.code !== code);\n    setCPTVolumes(updated);\n    localStorage.setCPTVolumes(updated);\n\n    toast({\n      title: \"CPT volume removed\",\n      description: `Removed ${code} from calculations.`,\n    });\n  };\n\n  const exportData = () => {\n    try {\n      const data = localStorage.exportData();\n      const blob = new Blob([data], { type: 'application/json' });\n      const url = URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = `radintel-data-${new Date().toISOString().split('T')[0]}.json`;\n      document.body.appendChild(a);\n      a.click();\n      document.body.removeChild(a);\n      URL.revokeObjectURL(url);\n\n      toast({\n        title: \"Data exported\",\n        description: \"Your data has been downloaded as a JSON file.\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Export failed\",\n        description: \"Unable to export data. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const importData = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (!file) return;\n\n    const reader = new FileReader();\n    reader.onload = (e) => {\n      try {\n        const data = e.target?.result as string;\n        localStorage.importData(data);\n        setCPTVolumes(localStorage.getCPTVolumes());\n\n        toast({\n          title: \"Data imported\",\n          description: \"Your data has been successfully imported.\",\n        });\n      } catch (error) {\n        toast({\n          title: \"Import failed\",\n          description: \"Invalid file format. Please select a valid RadIntel export file.\",\n          variant: \"destructive\",\n        });\n      }\n    };\n    reader.readAsText(file);\n  };\n\n  const calculateImpacts = (): ImpactCalculation[] => {\n    return cptVolumes.map(volume => {\n      const rateChange = recentRateChanges[volume.code as keyof typeof recentRateChanges];\n      \n      if (!rateChange) {\n        return {\n          cptCode: volume.code,\n          volume: volume.volume,\n          oldRate: 0,\n          newRate: 0,\n          monthlyImpact: 0,\n          annualImpact: 0,\n        };\n      }\n\n      const monthlyImpact = (rateChange.new - rateChange.old) * volume.volume;\n      \n      return {\n        cptCode: volume.code,\n        volume: volume.volume,\n        oldRate: rateChange.old,\n        newRate: rateChange.new,\n        monthlyImpact,\n        annualImpact: monthlyImpact * 12,\n      };\n    });\n  };\n\n  const getCPTDescription = (code: string): string => {\n    const descriptions: Record<string, string> = {\n      '70553': 'Brain MRI with contrast',\n      '70552': 'Brain MRI without contrast',\n      '70551': 'Brain MRI without and with contrast',\n      '70450': 'CT head without contrast',\n      '70460': 'CT head with contrast',\n      '70470': 'CT head without and with contrast',\n      '72148': 'MRI lumbar spine without contrast',\n      '72149': 'MRI lumbar spine with contrast',\n      '72158': 'MRI lumbar spine without and with contrast',\n      '73721': 'MRI knee without contrast',\n      '73722': 'MRI knee with contrast',\n    };\n    return descriptions[code] || 'Unknown procedure';\n  };\n\n  const impacts = calculateImpacts();\n  const totalMonthlyImpact = impacts.reduce((sum, impact) => sum + impact.monthlyImpact, 0);\n  const totalAnnualImpact = totalMonthlyImpact * 12;\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Financial Impact Calculator</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          <div className=\"space-y-4\">\n            <div>\n              <Label className=\"text-sm font-medium text-gray-700 mb-2\">\n                Monthly CPT Volumes (stored locally)\n              </Label>\n              <div className=\"space-y-2\">\n                {cptVolumes.map((volume) => (\n                  <div key={volume.code} className=\"flex items-center space-x-3\">\n                    <Input\n                      value={volume.code}\n                      readOnly\n                      className=\"flex-1\"\n                    />\n                    <Input\n                      value={volume.volume}\n                      readOnly\n                      className=\"w-24\"\n                    />\n                    <Button\n                      variant=\"ghost\"\n                      size=\"icon\"\n                      onClick={() => removeCPTVolume(volume.code)}\n                      className=\"text-gray-400 hover:text-red-500\"\n                    >\n                      <Trash2 className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n                ))}\n                \n                <div className=\"flex items-center space-x-3\">\n                  <Input\n                    placeholder=\"CPT Code\"\n                    value={newCPT.code}\n                    onChange={(e) => setNewCPT(prev => ({ ...prev, code: e.target.value }))}\n                    className=\"flex-1\"\n                  />\n                  <Input\n                    placeholder=\"Volume\"\n                    type=\"number\"\n                    value={newCPT.volume}\n                    onChange={(e) => setNewCPT(prev => ({ ...prev, volume: e.target.value }))}\n                    className=\"w-24\"\n                  />\n                  <Button\n                    variant=\"ghost\"\n                    size=\"icon\"\n                    onClick={addCPTVolume}\n                    className=\"text-primary hover:text-primary/80\"\n                  >\n                    <Plus className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              </div>\n              \n              <div className=\"flex space-x-2 mt-4\">\n                <Button variant=\"outline\" onClick={exportData}>\n                  <Download className=\"h-4 w-4 mr-2\" />\n                  Export Data\n                </Button>\n                <label className=\"cursor-pointer\">\n                  <Button variant=\"outline\" asChild>\n                    <span>\n                      <Upload className=\"h-4 w-4 mr-2\" />\n                      Import Data\n                    </span>\n                  </Button>\n                  <input\n                    type=\"file\"\n                    accept=\".json\"\n                    onChange={importData}\n                    className=\"hidden\"\n                  />\n                </label>\n              </div>\n            </div>\n          </div>\n          \n          <div className=\"bg-gray-50 rounded-lg p-4\">\n            <h4 className=\"font-medium text-gray-900 mb-3\">Impact Summary</h4>\n            <div className=\"space-y-2 text-sm\">\n              {impacts.map((impact) => (\n                <div key={impact.cptCode} className=\"flex justify-between\">\n                  <span className=\"text-gray-600\">\n                    {impact.cptCode} ({impact.volume} procedures):\n                  </span>\n                  <span className={`font-medium ${\n                    impact.monthlyImpact > 0 ? 'text-green-600' : \n                    impact.monthlyImpact < 0 ? 'text-red-600' : 'text-gray-600'\n                  }`}>\n                    {impact.monthlyImpact === 0 ? '$0.00' : \n                     impact.monthlyImpact > 0 ? `+$${impact.monthlyImpact.toFixed(2)}` :\n                     `-$${Math.abs(impact.monthlyImpact).toFixed(2)}`}\n                  </span>\n                </div>\n              ))}\n              \n              {impacts.length > 0 && (\n                <>\n                  <hr className=\"my-2\" />\n                  <div className=\"flex justify-between font-medium\">\n                    <span className=\"text-gray-900\">Total Monthly Impact:</span>\n                    <span className={\n                      totalMonthlyImpact > 0 ? 'text-green-600' : \n                      totalMonthlyImpact < 0 ? 'text-red-600' : 'text-gray-600'\n                    }>\n                      {totalMonthlyImpact === 0 ? '$0.00' : \n                       totalMonthlyImpact > 0 ? `+$${totalMonthlyImpact.toFixed(2)}` :\n                       `-$${Math.abs(totalMonthlyImpact).toFixed(2)}`}\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between text-xs text-gray-500\">\n                    <span>Annual projection:</span>\n                    <span>\n                      {totalAnnualImpact === 0 ? '$0.00' : \n                       totalAnnualImpact > 0 ? `+$${totalAnnualImpact.toFixed(2)}` :\n                       `-$${Math.abs(totalAnnualImpact).toFixed(2)}`}\n                    </span>\n                  </div>\n                </>\n              )}\n              \n              {impacts.length === 0 && (\n                <p className=\"text-gray-500 text-center py-4\">\n                  Add CPT codes and volumes to see impact calculations\n                </p>\n              )}\n            </div>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":11053},"client/src/components/layout.tsx":{"content":"import { useState } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { api } from \"@/lib/api\";\nimport { cn } from \"@/lib/utils\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  Scan, \n  LayoutDashboard, \n  Bell, \n  Archive, \n  Calculator, \n  Activity,\n  RefreshCw,\n  BellRing,\n  MapPin\n} from \"lucide-react\";\n\ninterface LayoutProps {\n  children: React.ReactNode;\n}\n\nexport default function Layout({ children }: LayoutProps) {\n  const [location] = useLocation();\n  const [isRefreshing, setIsRefreshing] = useState(false);\n\n  const { data: events = [] } = useQuery({\n    queryKey: ['/api/events'],\n    queryFn: () => api.getEvents({ limit: 100 }),\n    refetchInterval: 30000, // Refresh every 30 seconds\n  });\n\n  const { data: status } = useQuery({\n    queryKey: ['/api/status'],\n    queryFn: () => api.getStatus(),\n    refetchInterval: 30000,\n  });\n\n  const urgentCount = events.filter(e => e.category === 'Urgent').length;\n  const totalAlerts = events.filter(e => e.category !== 'Suppressed').length;\n\n  const handleRefresh = async () => {\n    setIsRefreshing(true);\n    try {\n      // Fetch both federal and California sources\n      await Promise.all([\n        // Federal sources\n        api.fetchRecalls(),\n        api.fetchCMSPFS(),\n        api.fetchFedReg(),\n        api.fetchDrugRecalls(),\n        api.fetchMAUDE(),\n        // California sources\n        api.fetchCaliforniaCDPH(),\n        api.fetchCaliforniaRHB(),\n        api.fetchCaliforniaMBC(),\n      ]);\n    } catch (error) {\n      console.error('Refresh failed:', error);\n    } finally {\n      setIsRefreshing(false);\n    }\n  };\n\n  const navigationItems = [\n    { href: \"/dashboard\", label: \"Radiology Dashboard\", icon: LayoutDashboard, active: location === \"/\" || location === \"/dashboard\" },\n    { href: \"/alerts\", label: \"Alerts\", icon: Bell, badge: totalAlerts },\n    { href: \"/archive\", label: \"Archive\", icon: Archive },\n    { href: \"/tools\", label: \"CPT Calculator\", icon: Calculator },\n    { href: \"/status\", label: \"System Status\", icon: Activity },\n  ];\n\n  const getStatusColor = () => {\n    if (!status) return \"bg-gray-500\";\n    const hasErrors = Object.values(status.errorCounts24h).some(count => count > 0);\n    return hasErrors ? \"bg-yellow-500\" : \"bg-green-500\";\n  };\n\n  const formatLastUpdate = () => {\n    if (!status) return \"Unknown\";\n    \n    const timestamps = Object.values(status.lastSuccess).filter(Boolean);\n    if (timestamps.length === 0) return \"Never\";\n    \n    const latest = new Date(Math.max(...timestamps.map(t => new Date(t!).getTime())));\n    const now = new Date();\n    const diffMs = now.getTime() - latest.getTime();\n    const diffMin = Math.floor(diffMs / 60000);\n    \n    if (diffMin < 1) return \"Just now\";\n    if (diffMin < 60) return `${diffMin}m ago`;\n    if (diffMin < 1440) return `${Math.floor(diffMin / 60)}h ago`;\n    return `${Math.floor(diffMin / 1440)}d ago`;\n  };\n\n  return (\n    <div className=\"min-h-screen flex bg-gray-50\">\n      {/* Sidebar */}\n      <aside className=\"w-64 bg-white shadow-sm border-r border-gray-200 fixed h-full z-10\">\n        <div className=\"p-6 border-b border-gray-200\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-8 h-8 bg-blue-600 rounded-lg flex items-center justify-center\">\n              <Scan className=\"h-4 w-4 text-white\" />\n            </div>\n            <div>\n              <h1 className=\"text-lg font-semibold text-gray-900\">RadIntel CA</h1>\n              <p className=\"text-xs text-gray-500\">Federal & California Compliance</p>\n            </div>\n          </div>\n          <div className=\"mt-3 flex items-center text-xs text-gray-500\">\n            <MapPin className=\"h-3 w-3 mr-1\" />\n            <span>California + Federal Sources</span>\n          </div>\n        </div>\n        \n        <nav className=\"p-4 space-y-2\">\n          {navigationItems.map((item) => (\n            <Link key={item.href} href={item.href}>\n              <div\n                className={cn(\n                  \"flex items-center space-x-3 px-3 py-2 rounded-lg font-medium transition-colors\",\n                  item.active\n                    ? \"bg-primary/10 text-primary\"\n                    : \"text-gray-600 hover:bg-gray-50\"\n                )}\n              >\n                <item.icon className=\"h-5 w-5\" />\n                <span>{item.label}</span>\n                {item.badge !== undefined && item.badge > 0 && (\n                  <Badge \n                    variant={item.label === \"Active Alerts\" && urgentCount > 0 ? \"destructive\" : \"secondary\"}\n                    className=\"ml-auto\"\n                  >\n                    {item.badge}\n                  </Badge>\n                )}\n              </div>\n            </Link>\n          ))}\n        </nav>\n\n        <div className=\"absolute bottom-4 left-4 right-4\">\n          <div className=\"bg-gray-50 rounded-lg p-3\">\n            <div className=\"text-xs text-gray-500 mb-1\">Last Update</div>\n            <div className=\"text-sm font-medium text-gray-900\">{formatLastUpdate()}</div>\n            <div className=\"flex items-center mt-2\">\n              <div className={cn(\"w-2 h-2 rounded-full\", getStatusColor())} />\n              <span className=\"text-xs text-gray-600 ml-2\">\n                {Object.values(status?.errorCounts24h || {}).some(count => count > 0)\n                  ? \"Issues detected\"\n                  : \"All systems operational\"}\n              </span>\n            </div>\n          </div>\n        </div>\n      </aside>\n\n      {/* Main Content */}\n      <main className=\"flex-1 ml-64\">\n        {/* Header */}\n        <header className=\"bg-white border-b border-gray-200 px-6 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h2 className=\"text-2xl font-bold text-gray-900\">Regulatory Dashboard</h2>\n              <p className=\"text-gray-600\">Monitor FDA, CMS, and Federal Register updates</p>\n            </div>\n            <div className=\"flex items-center space-x-4\">\n              <Button \n                onClick={handleRefresh}\n                disabled={isRefreshing}\n                className=\"bg-primary hover:bg-primary/90\"\n              >\n                <RefreshCw className={cn(\"h-4 w-4 mr-2\", isRefreshing && \"animate-spin\")} />\n                {isRefreshing ? \"Refreshing...\" : \"Refresh Data\"}\n              </Button>\n              <div className=\"relative\">\n                <Button variant=\"ghost\" size=\"icon\">\n                  <BellRing className=\"h-5 w-5\" />\n                  {urgentCount > 0 && (\n                    <span className=\"absolute -top-1 -right-1 w-3 h-3 bg-red-500 rounded-full\" />\n                  )}\n                </Button>\n              </div>\n            </div>\n          </div>\n        </header>\n\n        {/* Content */}\n        <div className=\"p-6\">\n          {children}\n        </div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":6979},"client/src/components/metrics-grid.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { api } from \"@/lib/api\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { \n  AlertTriangle, \n  Info, \n  DollarSign, \n  Activity,\n  TrendingUp,\n  TrendingDown,\n  Minus,\n  Scan,\n  MapPin\n} from \"lucide-react\";\n\nexport default function MetricsGrid() {\n  const { data: events = [] } = useQuery({\n    queryKey: ['/api/events'],\n    queryFn: () => api.getEvents({ limit: 100 }),\n  });\n\n  const { data: status } = useQuery({\n    queryKey: ['/api/status'],\n    queryFn: () => api.getStatus(),\n  });\n\n  const urgentCount = events.filter(e => e.category === 'Urgent').length;\n  const infoCount = events.filter(e => e.category === 'Informational').length;\n  \n  // California-specific metrics\n  const californiaAlerts = events.filter(e => \n    ['CDPH', 'RHB', 'MBC'].includes(e.source) || e.state === 'CA'\n  ).length;\n  \n  // Count by modality type\n  const radiologyDevices = events.filter(e => e.modalityType).length;\n  \n  // Calculate financial impact from recent CMS events\n  const cmsEvents = events.filter(e => e.source === 'CMS' && e.delta);\n  const totalImpact = cmsEvents.reduce((sum, event) => {\n    if (event.delta) {\n      return sum + (event.delta.new - event.delta.old);\n    }\n    return sum;\n  }, 0);\n  \n  const estimatedMonthlyImpact = totalImpact * 30; // Rough estimate for demo\n\n  const systemHealth = status && Object.values(status.errorCounts24h).every(count => count === 0) ? 99.2 : 85.5;\n\n  const recentUrgent = events.filter(e => {\n    if (e.category !== 'Urgent') return false;\n    const eventDate = new Date(e.archivedAt);\n    const yesterday = new Date();\n    yesterday.setDate(yesterday.getDate() - 1);\n    return eventDate > yesterday;\n  }).length;\n\n  const metrics = [\n    {\n      title: \"Urgent Alerts\",\n      value: urgentCount.toString(),\n      icon: AlertTriangle,\n      color: \"text-red-600\",\n      bgColor: \"bg-red-100\",\n      trend: recentUrgent > 0 ? \"up\" : \"none\",\n      trendText: recentUrgent > 0 ? `${recentUrgent} new today` : \"Federal + CA\",\n      trendColor: recentUrgent > 0 ? \"text-red-500\" : \"text-gray-400\"\n    },\n    {\n      title: \"CA Compliance\", \n      value: californiaAlerts.toString(),\n      icon: MapPin,\n      color: \"text-blue-600\",\n      bgColor: \"bg-blue-100\",\n      trend: \"none\",\n      trendText: \"California-specific\",\n      trendColor: \"text-blue-500\"\n    },\n    {\n      title: \"Radiology Devices\",\n      value: radiologyDevices.toString(),\n      icon: Scan,\n      color: \"text-purple-600\",\n      bgColor: \"bg-purple-100\",\n      trend: \"none\",\n      trendText: \"Device alerts\",\n      trendColor: \"text-purple-500\"\n    },\n    {\n      title: \"CPT Impact\",\n      value: estimatedMonthlyImpact >= 0 \n        ? `+$${Math.abs(estimatedMonthlyImpact).toFixed(0)}`\n        : `-$${Math.abs(estimatedMonthlyImpact).toFixed(0)}`,\n      icon: DollarSign,\n      color: estimatedMonthlyImpact >= 0 ? \"text-green-600\" : \"text-red-600\",\n      bgColor: estimatedMonthlyImpact >= 0 ? \"bg-green-100\" : \"bg-red-100\",\n      trend: estimatedMonthlyImpact >= 0 ? \"down\" : \"up\",\n      trendText: \"Monthly estimate\",\n      trendColor: estimatedMonthlyImpact >= 0 ? \"text-green-500\" : \"text-red-500\"\n    }\n  ];\n\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n      {metrics.map((metric) => (\n        <Card key={metric.title} className=\"border border-gray-200\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-600\">{metric.title}</p>\n                <p className={`text-3xl font-bold ${metric.color}`}>{metric.value}</p>\n              </div>\n              <div className={`w-12 h-12 ${metric.bgColor} rounded-lg flex items-center justify-center`}>\n                <metric.icon className={`${metric.color} text-xl`} />\n              </div>\n            </div>\n            <div className=\"mt-4 flex items-center text-sm\">\n              {metric.trend === \"up\" && <TrendingUp className={`h-4 w-4 mr-1 ${metric.trendColor}`} />}\n              {metric.trend === \"down\" && <TrendingDown className={`h-4 w-4 mr-1 ${metric.trendColor}`} />}\n              {metric.trend === \"none\" && <Minus className={`h-4 w-4 mr-1 ${metric.trendColor}`} />}\n              <span className=\"text-gray-500\">{metric.trendText}</span>\n            </div>\n          </CardContent>\n        </Card>\n      ))}\n    </div>\n  );\n}\n","size_bytes":4468},"client/src/components/system-status.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { api } from \"@/lib/api\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\n\nexport default function SystemStatus() {\n  const { data: status } = useQuery({\n    queryKey: ['/api/status'],\n    queryFn: () => api.getStatus(),\n    refetchInterval: 30000,\n  });\n\n  const formatTime = (timestamp: Date | string | null) => {\n    if (!timestamp) return 'Never';\n    const date = typeof timestamp === 'string' ? new Date(timestamp) : timestamp;\n    const now = new Date();\n    const diffMs = now.getTime() - date.getTime();\n    const diffMin = Math.floor(diffMs / 60000);\n    \n    if (diffMin < 1) return 'Just now';\n    if (diffMin < 60) return `${diffMin}m ago`;\n    if (diffMin < 1440) return `${Math.floor(diffMin / 60)}h ago`;\n    return `${Math.floor(diffMin / 1440)}d ago`;\n  };\n\n  const getStatusColor = (hasErrors: boolean, lastSuccess: Date | null) => {\n    if (!lastSuccess) return 'bg-gray-400';\n    if (hasErrors) return 'bg-yellow-500';\n    return 'bg-green-500';\n  };\n\n  const dataSources = [\n    { key: 'recalls', label: 'FDA openFDA', endpoint: '/api/recalls' },\n    { key: 'cms_pfs', label: 'CMS PFS', endpoint: '/api/cms-pfs' },\n    { key: 'fedreg', label: 'Federal Register', endpoint: '/api/fedreg' },\n  ];\n\n  const aiServices = [\n    { label: 'Gemini Normalizer', status: 'Online', color: 'bg-green-500' },\n    { label: 'Perplexity Summarizer', status: 'Online', color: 'bg-green-500' },\n  ];\n\n  const deliveryServices = [\n    { label: 'Email Service', status: 'Online', info: 'Ready', color: 'bg-green-500' },\n    { label: 'SMS Service', status: 'Disabled', info: 'Optional', color: 'bg-gray-400' },\n  ];\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>System Status & Monitoring</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n          <div className=\"space-y-3\">\n            <h4 className=\"font-medium text-gray-900\">Data Sources</h4>\n            <div className=\"space-y-2\">\n              {dataSources.map((source) => {\n                const lastSuccess = status?.lastSuccess[source.key];\n                const errorCount = status?.errorCounts24h[source.key] || 0;\n                const hasErrors = errorCount > 0;\n                \n                return (\n                  <div key={source.key} className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center space-x-2\">\n                      <div className={`w-2 h-2 rounded-full ${getStatusColor(hasErrors, lastSuccess)}`} />\n                      <span className=\"text-sm text-gray-700\">{source.label}</span>\n                    </div>\n                    <span className=\"text-xs text-gray-500\">\n                      {formatTime(lastSuccess || null)}\n                    </span>\n                  </div>\n                );\n              })}\n            </div>\n          </div>\n          \n          <div className=\"space-y-3\">\n            <h4 className=\"font-medium text-gray-900\">AI Services</h4>\n            <div className=\"space-y-2\">\n              {aiServices.map((service) => (\n                <div key={service.label} className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center space-x-2\">\n                    <div className={`w-2 h-2 rounded-full ${service.color}`} />\n                    <span className=\"text-sm text-gray-700\">{service.label}</span>\n                  </div>\n                  <span className=\"text-xs text-gray-500\">{service.status}</span>\n                </div>\n              ))}\n            </div>\n          </div>\n          \n          <div className=\"space-y-3\">\n            <h4 className=\"font-medium text-gray-900\">Delivery</h4>\n            <div className=\"space-y-2\">\n              {deliveryServices.map((service) => (\n                <div key={service.label} className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center space-x-2\">\n                    <div className={`w-2 h-2 rounded-full ${service.color}`} />\n                    <span className=\"text-sm text-gray-700\">{service.label}</span>\n                  </div>\n                  <span className=\"text-xs text-gray-500\">{service.info}</span>\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n        \n        {status && (\n          <div className=\"mt-6 pt-4 border-t border-gray-200\">\n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-sm\">\n              <div>\n                <span className=\"text-gray-500\">Uptime:</span>\n                <div className=\"font-medium\">\n                  {Math.floor(status.uptime / 3600)}h {Math.floor((status.uptime % 3600) / 60)}m\n                </div>\n              </div>\n              <div>\n                <span className=\"text-gray-500\">Last Digest:</span>\n                <div className=\"font-medium\">{formatTime(status.lastDigestSent)}</div>\n              </div>\n              <div>\n                <span className=\"text-gray-500\">Total Errors (24h):</span>\n                <div className=\"font-medium\">\n                  {Object.values(status.errorCounts24h).reduce((sum, count) => sum + count, 0)}\n                </div>\n              </div>\n              <div>\n                <span className=\"text-gray-500\">Last Update:</span>\n                <div className=\"font-medium\">{formatTime(status.timestamp)}</div>\n              </div>\n            </div>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":5575},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/api.ts":{"content":"import { apiRequest } from \"@/lib/queryClient\";\nimport type { Event, SystemStatus } from \"@/types\";\n\nexport const api = {\n  // Events\n  getEvents: async (params?: { limit?: number; category?: string; source?: string }): Promise<Event[]> => {\n    const searchParams = new URLSearchParams();\n    if (params?.limit) searchParams.set('limit', params.limit.toString());\n    if (params?.category && params.category !== 'all') searchParams.set('category', params.category);\n    if (params?.source && params.source !== 'all') searchParams.set('source', params.source);\n    \n    const response = await apiRequest('GET', `/api/events?${searchParams}`);\n    return response.json();\n  },\n\n  // Data collection\n  fetchRecalls: async () => {\n    const response = await apiRequest('GET', '/api/recalls');\n    return response.json();\n  },\n\n  fetchCMSPFS: async () => {\n    const response = await apiRequest('GET', '/api/cms-pfs');\n    return response.json();\n  },\n\n  fetchFedReg: async () => {\n    const response = await apiRequest('GET', '/api/fedreg');\n    return response.json();\n  },\n\n  fetchDrugRecalls: async () => {\n    const response = await apiRequest('GET', '/api/drug-recalls');\n    return response.json();\n  },\n\n  fetchMAUDE: async () => {\n    const response = await apiRequest('GET', '/api/maude');\n    return response.json();\n  },\n\n  fetchAuditDeadlines: async () => {\n    const response = await apiRequest('GET', '/api/audit-deadlines');\n    return response.json();\n  },\n\n  fetchStateDOH: async () => {\n    const response = await apiRequest('GET', '/api/state-doh');\n    return response.json();\n  },\n\n  // California-specific endpoints\n  fetchCaliforniaCDPH: async () => {\n    const response = await apiRequest('GET', '/api/california/cdph');\n    return response.json();\n  },\n\n  fetchCaliforniaRHB: async () => {\n    const response = await apiRequest('GET', '/api/california/rhb');\n    return response.json();\n  },\n\n  fetchCaliforniaMBC: async () => {\n    const response = await apiRequest('GET', '/api/california/mbc');\n    return response.json();\n  },\n\n  // Feedback\n  submitFeedback: async (eventId: string, helpful: boolean) => {\n    const response = await apiRequest('POST', '/api/feedback', { eventId, helpful });\n    return response.json();\n  },\n\n  // Delivery\n  sendEmail: async (alertIds: string[], recipients: string[]) => {\n    const response = await apiRequest('POST', '/api/send-email', { alertIds, recipients });\n    return response.json();\n  },\n\n  sendSMS: async (alertId: string, phoneNumbers: string[]) => {\n    const response = await apiRequest('POST', '/api/send-sms', { alertId, phoneNumbers });\n    return response.json();\n  },\n\n  // System status\n  getStatus: async (): Promise<SystemStatus> => {\n    const response = await apiRequest('GET', '/api/status');\n    return response.json();\n  },\n};\n","size_bytes":2815},"client/src/lib/localStorage.ts":{"content":"import type { CPTVolume, UserPreferences } from \"@/types\";\n\nconst CPT_VOLUMES_KEY = 'radintel_cpt_volumes';\nconst USER_PREFERENCES_KEY = 'radintel_preferences';\n\nexport const localStorage = {\n  // CPT Volumes\n  getCPTVolumes: (): CPTVolume[] => {\n    try {\n      const data = window.localStorage.getItem(CPT_VOLUMES_KEY);\n      return data ? JSON.parse(data) : [];\n    } catch {\n      return [];\n    }\n  },\n\n  setCPTVolumes: (volumes: CPTVolume[]): void => {\n    try {\n      window.localStorage.setItem(CPT_VOLUMES_KEY, JSON.stringify(volumes));\n    } catch (error) {\n      console.error('Failed to save CPT volumes:', error);\n    }\n  },\n\n  addCPTVolume: (volume: CPTVolume): void => {\n    const volumes = localStorage.getCPTVolumes();\n    const existingIndex = volumes.findIndex(v => v.code === volume.code);\n    \n    if (existingIndex >= 0) {\n      volumes[existingIndex] = volume;\n    } else {\n      volumes.push(volume);\n    }\n    \n    localStorage.setCPTVolumes(volumes);\n  },\n\n  removeCPTVolume: (code: string): void => {\n    const volumes = localStorage.getCPTVolumes().filter(v => v.code !== code);\n    localStorage.setCPTVolumes(volumes);\n  },\n\n  // User Preferences\n  getPreferences: (): UserPreferences => {\n    try {\n      const data = window.localStorage.getItem(USER_PREFERENCES_KEY);\n      return data ? JSON.parse(data) : {\n        notifications: { email: true, sms: false, push: false },\n        digest: { frequency: 'daily', time: '09:00' },\n        contacts: { email: [], phone: [] },\n        thresholds: { urgent: 85, informational: 75 },\n        sources: { fda: true, cms: true, fedreg: true }\n      };\n    } catch {\n      return {\n        notifications: { email: true, sms: false, push: false },\n        digest: { frequency: 'daily', time: '09:00' },\n        contacts: { email: [], phone: [] },\n        thresholds: { urgent: 85, informational: 75 },\n        sources: { fda: true, cms: true, fedreg: true }\n      };\n    }\n  },\n\n  setPreferences: (preferences: UserPreferences): void => {\n    try {\n      window.localStorage.setItem(USER_PREFERENCES_KEY, JSON.stringify(preferences));\n    } catch (error) {\n      console.error('Failed to save preferences:', error);\n    }\n  },\n\n  // Export/Import\n  exportData: (): string => {\n    const data = {\n      cptVolumes: localStorage.getCPTVolumes(),\n      preferences: localStorage.getPreferences(),\n      exportedAt: new Date().toISOString(),\n    };\n    return JSON.stringify(data, null, 2);\n  },\n\n  importData: (jsonData: string): void => {\n    try {\n      const data = JSON.parse(jsonData);\n      \n      if (data.cptVolumes) {\n        localStorage.setCPTVolumes(data.cptVolumes);\n      }\n      \n      if (data.preferences) {\n        localStorage.setPreferences(data.preferences);\n      }\n    } catch (error) {\n      throw new Error('Invalid import data format');\n    }\n  },\n\n  clearAll: (): void => {\n    try {\n      window.localStorage.removeItem(CPT_VOLUMES_KEY);\n      window.localStorage.removeItem(USER_PREFERENCES_KEY);\n    } catch (error) {\n      console.error('Failed to clear data:', error);\n    }\n  },\n};\n","size_bytes":3082},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/alerts.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { api } from \"@/lib/api\";\nimport FilterControls from \"@/components/filter-controls\";\nimport AlertCard from \"@/components/alert-card\";\nimport type { FilterState, Event } from \"@/types\";\n\nexport default function Alerts() {\n  const [filters, setFilters] = useState<FilterState>({\n    category: 'all',\n    source: 'all',\n    dateRange: 'all'\n  });\n\n  const { data: events = [], isLoading } = useQuery({\n    queryKey: ['/api/events', filters],\n    queryFn: () => api.getEvents({\n      limit: 100,\n      category: filters.category !== 'all' ? filters.category : undefined,\n      source: filters.source !== 'all' ? filters.source : undefined,\n    }),\n  });\n\n  // Filter to show only non-suppressed alerts\n  const activeEvents = events.filter((event: Event) => event.category !== 'Suppressed');\n\n  const filteredEvents = activeEvents.filter((event: Event) => {\n    if (filters.category !== 'all' && event.category.toLowerCase() !== filters.category) {\n      return false;\n    }\n    if (filters.source !== 'all' && event.source !== filters.source) {\n      return false;\n    }\n    return true;\n  });\n\n  const urgentCount = activeEvents.filter((e: Event) => e.category === 'Urgent').length;\n  const infoCount = activeEvents.filter((e: Event) => e.category === 'Informational').length;\n  const digestCount = activeEvents.filter((e: Event) => e.category === 'Digest').length;\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"h-20 bg-gray-200 rounded-xl animate-pulse\" />\n        <div className=\"space-y-4\">\n          {[...Array(5)].map((_, i) => (\n            <div key={i} className=\"h-40 bg-gray-200 rounded-xl animate-pulse\" />\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Page Header */}\n      <div>\n        <h1 className=\"text-3xl font-bold text-gray-900\">Active Alerts</h1>\n        <p className=\"text-gray-600 mt-2\">\n          Current regulatory alerts requiring attention ({activeEvents.length} total)\n        </p>\n      </div>\n\n      {/* Filter Controls */}\n      <FilterControls\n        onFilterChange={setFilters}\n        urgentCount={urgentCount}\n        infoCount={infoCount}\n        digestCount={digestCount}\n      />\n\n      {/* Alerts List */}\n      <div className=\"space-y-4\">\n        {filteredEvents.length === 0 ? (\n          <div className=\"text-center py-12\">\n            <p className=\"text-gray-500\">\n              {activeEvents.length === 0 \n                ? \"No active alerts at this time.\"\n                : \"No alerts found matching your filters.\"}\n            </p>\n          </div>\n        ) : (\n          filteredEvents.map((event: Event) => (\n            <AlertCard key={event.id} event={event} />\n          ))\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":2862},"client/src/pages/archive.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { api } from \"@/lib/api\";\nimport FilterControls from \"@/components/filter-controls\";\nimport AlertCard from \"@/components/alert-card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Search } from \"lucide-react\";\nimport type { FilterState, Event } from \"@/types\";\n\nexport default function Archive() {\n  const [filters, setFilters] = useState<FilterState>({\n    category: 'all',\n    source: 'all',\n    dateRange: 'all'\n  });\n  const [searchTerm, setSearchTerm] = useState('');\n  const [limit, setLimit] = useState(50);\n\n  const { data: events = [], isLoading } = useQuery({\n    queryKey: ['/api/events', filters, limit],\n    queryFn: () => api.getEvents({\n      limit,\n      category: filters.category !== 'all' ? filters.category : undefined,\n      source: filters.source !== 'all' ? filters.source : undefined,\n    }),\n  });\n\n  const filteredEvents = events.filter((event: Event) => {\n    // Search filter\n    if (searchTerm) {\n      const searchLower = searchTerm.toLowerCase();\n      if (!event.title.toLowerCase().includes(searchLower) &&\n          !event.summary?.toLowerCase().includes(searchLower) &&\n          !event.manufacturer?.toLowerCase().includes(searchLower) &&\n          !event.deviceName?.toLowerCase().includes(searchLower)) {\n        return false;\n      }\n    }\n\n    // Category filter\n    if (filters.category !== 'all' && event.category.toLowerCase() !== filters.category) {\n      return false;\n    }\n\n    // Source filter\n    if (filters.source !== 'all' && event.source !== filters.source) {\n      return false;\n    }\n\n    return true;\n  });\n\n  const urgentCount = events.filter((e: Event) => e.category === 'Urgent').length;\n  const infoCount = events.filter((e: Event) => e.category === 'Informational').length;\n  const digestCount = events.filter((e: Event) => e.category === 'Digest').length;\n  const suppressedCount = events.filter((e: Event) => e.category === 'Suppressed').length;\n\n  const loadMore = () => {\n    setLimit(prev => prev + 50);\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"h-20 bg-gray-200 rounded-xl animate-pulse\" />\n        <div className=\"h-12 bg-gray-200 rounded-lg animate-pulse\" />\n        <div className=\"space-y-4\">\n          {[...Array(5)].map((_, i) => (\n            <div key={i} className=\"h-40 bg-gray-200 rounded-xl animate-pulse\" />\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Page Header */}\n      <div>\n        <h1 className=\"text-3xl font-bold text-gray-900\">Alert Archive</h1>\n        <p className=\"text-gray-600 mt-2\">\n          Historical regulatory alerts and events ({events.length} loaded)\n        </p>\n      </div>\n\n      {/* Search Bar */}\n      <div className=\"relative max-w-md\">\n        <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n        <Input\n          placeholder=\"Search alerts...\"\n          value={searchTerm}\n          onChange={(e) => setSearchTerm(e.target.value)}\n          className=\"pl-10\"\n        />\n      </div>\n\n      {/* Enhanced Filter Controls (includes Suppressed) */}\n      <div className=\"bg-white rounded-xl shadow-sm border border-gray-200 p-6\">\n        <div className=\"flex flex-col sm:flex-row items-start sm:items-center justify-between space-y-4 sm:space-y-0\">\n          <h3 className=\"text-lg font-semibold text-gray-900\">Filter Archives</h3>\n          <div className=\"flex flex-wrap items-center gap-3\">\n            <div className=\"flex space-x-2\">\n              <Button\n                variant={filters.category === 'urgent' ? \"default\" : \"outline\"}\n                size=\"sm\"\n                onClick={() => setFilters(prev => ({ ...prev, category: prev.category === 'urgent' ? 'all' : 'urgent' }))}\n                className={filters.category === 'urgent' ? \"bg-red-100 text-red-800 hover:bg-red-200 border-red-200\" : \"\"}\n              >\n                Urgent ({urgentCount})\n              </Button>\n              <Button\n                variant={filters.category === 'informational' ? \"default\" : \"outline\"}\n                size=\"sm\"\n                onClick={() => setFilters(prev => ({ ...prev, category: prev.category === 'informational' ? 'all' : 'informational' }))}\n                className={filters.category === 'informational' ? \"bg-amber-100 text-amber-800 hover:bg-amber-200 border-amber-200\" : \"\"}\n              >\n                Informational ({infoCount})\n              </Button>\n              <Button\n                variant={filters.category === 'digest' ? \"default\" : \"outline\"}\n                size=\"sm\"\n                onClick={() => setFilters(prev => ({ ...prev, category: prev.category === 'digest' ? 'all' : 'digest' }))}\n                className={filters.category === 'digest' ? \"bg-blue-100 text-blue-800 hover:bg-blue-200 border-blue-200\" : \"\"}\n              >\n                Digest ({digestCount})\n              </Button>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => setFilters(prev => ({ ...prev, category: 'all' }))}\n              >\n                All\n              </Button>\n            </div>\n          </div>\n        </div>\n        {suppressedCount > 0 && (\n          <div className=\"mt-3 text-sm text-gray-500\">\n            Note: {suppressedCount} suppressed alerts are not shown (score &lt; 50)\n          </div>\n        )}\n      </div>\n\n      {/* Alerts List */}\n      <div className=\"space-y-4\">\n        {filteredEvents.length === 0 ? (\n          <div className=\"text-center py-12\">\n            <p className=\"text-gray-500\">\n              {searchTerm \n                ? \"No alerts found matching your search.\"\n                : \"No alerts found matching your filters.\"}\n            </p>\n          </div>\n        ) : (\n          <>\n            {filteredEvents.map((event: Event) => (\n              <AlertCard key={event.id} event={event} />\n            ))}\n            \n            {events.length >= limit && (\n              <div className=\"text-center pt-6\">\n                <Button \n                  variant=\"outline\" \n                  onClick={loadMore}\n                  disabled={isLoading}\n                >\n                  Load More Events\n                </Button>\n              </div>\n            )}\n          </>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":6492},"client/src/pages/dashboard.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { api } from \"@/lib/api\";\nimport MetricsGrid from \"@/components/metrics-grid\";\nimport FilterControls from \"@/components/filter-controls\";\nimport AlertCard from \"@/components/alert-card\";\nimport ImpactCalculator from \"@/components/impact-calculator\";\nimport SystemStatus from \"@/components/system-status\";\nimport { OnboardingModal } from \"@/components/onboarding-modal\";\nimport { Info } from \"lucide-react\";\nimport type { FilterState, Event } from \"@/types\";\n\nexport default function Dashboard() {\n  // Show onboarding modal on first visit\n  const [showOnboarding] = useState(true);\n  const [filters, setFilters] = useState<FilterState>({\n    category: 'all',\n    source: 'all',\n    dateRange: 'all'\n  });\n\n  const { data: events = [], isLoading } = useQuery({\n    queryKey: ['/api/events', filters],\n    queryFn: () => api.getEvents({\n      limit: 50,\n      category: filters.category !== 'all' ? filters.category : undefined,\n      source: filters.source !== 'all' ? filters.source : undefined,\n    }),\n  });\n\n  const filteredEvents = events.filter((event: Event) => {\n    if (filters.category !== 'all' && event.category.toLowerCase() !== filters.category) {\n      return false;\n    }\n    if (filters.source !== 'all' && event.source !== filters.source) {\n      return false;\n    }\n    return true;\n  });\n\n  const urgentCount = events.filter((e: Event) => e.category === 'Urgent').length;\n  const infoCount = events.filter((e: Event) => e.category === 'Informational').length;\n  const digestCount = events.filter((e: Event) => e.category === 'Digest').length;\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          {[...Array(4)].map((_, i) => (\n            <div key={i} className=\"h-32 bg-gray-200 rounded-xl animate-pulse\" />\n          ))}\n        </div>\n        <div className=\"h-20 bg-gray-200 rounded-xl animate-pulse\" />\n        <div className=\"space-y-4\">\n          {[...Array(3)].map((_, i) => (\n            <div key={i} className=\"h-40 bg-gray-200 rounded-xl animate-pulse\" />\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Onboarding Modal */}\n      <OnboardingModal />\n      \n      {/* Dashboard Header with Disclaimer */}\n      <div className=\"mb-4\">\n        <h1 className=\"text-3xl font-bold mb-2\">Dashboard</h1>\n        <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n          <Info className=\"h-4 w-4\" />\n          <span>For information only. Not medical advice.</span>\n        </div>\n      </div>\n      \n      {/* Metrics Grid */}\n      <MetricsGrid />\n\n      {/* Filter Controls */}\n      <FilterControls\n        onFilterChange={setFilters}\n        urgentCount={urgentCount}\n        infoCount={infoCount}\n        digestCount={digestCount}\n      />\n\n      {/* Alerts List */}\n      <div className=\"space-y-4\">\n        {filteredEvents.length === 0 ? (\n          <div className=\"text-center py-12\">\n            <p className=\"text-gray-500\">No alerts found matching your filters.</p>\n          </div>\n        ) : (\n          filteredEvents.map((event: Event) => (\n            <AlertCard key={event.id} event={event} />\n          ))\n        )}\n      </div>\n\n      {/* Impact Calculator */}\n      <ImpactCalculator />\n\n      {/* System Status */}\n      <SystemStatus />\n    </div>\n  );\n}\n","size_bytes":3478},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/status.tsx":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { api } from \"@/lib/api\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { \n  Activity, \n  CheckCircle, \n  XCircle, \n  AlertTriangle, \n  Clock, \n  RefreshCw,\n  Database,\n  Brain,\n  MessageSquare,\n  Mail,\n  Smartphone,\n  Server,\n  Globe,\n  TrendingUp\n} from \"lucide-react\";\n\nexport default function Status() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: status, isLoading } = useQuery({\n    queryKey: ['/api/status'],\n    queryFn: () => api.getStatus(),\n    refetchInterval: 10000, // Refresh every 10 seconds\n  });\n\n  const { data: events = [] } = useQuery({\n    queryKey: ['/api/events'],\n    queryFn: () => api.getEvents({ limit: 100 }),\n  });\n\n  const refreshMutation = useMutation({\n    mutationFn: async () => {\n      await Promise.all([\n        api.fetchRecalls(),\n        api.fetchCMSPFS(),\n        api.fetchFedReg(),\n      ]);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/status'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/events'] });\n      toast({\n        title: \"Data refreshed\",\n        description: \"All data sources have been updated successfully.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Refresh failed\",\n        description: \"Some data sources may have failed to update.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const formatTime = (timestamp: Date | string | null) => {\n    if (!timestamp) return 'Never';\n    const date = typeof timestamp === 'string' ? new Date(timestamp) : timestamp;\n    const now = new Date();\n    const diffMs = now.getTime() - date.getTime();\n    const diffMin = Math.floor(diffMs / 60000);\n    \n    if (diffMin < 1) return 'Just now';\n    if (diffMin < 60) return `${diffMin}m ago`;\n    if (diffMin < 1440) return `${Math.floor(diffMin / 60)}h ago`;\n    return `${Math.floor(diffMin / 1440)}d ago`;\n  };\n\n  const formatUptime = (seconds: number) => {\n    const days = Math.floor(seconds / 86400);\n    const hours = Math.floor((seconds % 86400) / 3600);\n    const minutes = Math.floor((seconds % 3600) / 60);\n    \n    if (days > 0) return `${days}d ${hours}h ${minutes}m`;\n    if (hours > 0) return `${hours}h ${minutes}m`;\n    return `${minutes}m`;\n  };\n\n  const getStatusBadge = (hasErrors: boolean, lastSuccess: Date | null) => {\n    if (!lastSuccess) {\n      return <Badge variant=\"secondary\"><XCircle className=\"h-3 w-3 mr-1\" />Never Run</Badge>;\n    }\n    \n    const now = new Date();\n    const diffHours = (now.getTime() - new Date(lastSuccess).getTime()) / (1000 * 60 * 60);\n    \n    if (hasErrors) {\n      return <Badge variant=\"destructive\"><AlertTriangle className=\"h-3 w-3 mr-1\" />Warning</Badge>;\n    }\n    \n    if (diffHours > 24) {\n      return <Badge variant=\"secondary\"><Clock className=\"h-3 w-3 mr-1\" />Stale</Badge>;\n    }\n    \n    return <Badge variant=\"default\" className=\"bg-green-100 text-green-800\"><CheckCircle className=\"h-3 w-3 mr-1\" />Healthy</Badge>;\n  };\n\n  const dataSources = [\n    { \n      key: 'recalls', \n      label: 'FDA openFDA', \n      description: 'Device enforcement recalls',\n      icon: Database,\n      endpoint: '/api/recalls'\n    },\n    { \n      key: 'cms_pfs', \n      label: 'CMS PFS', \n      description: 'Payment schedule updates',\n      icon: TrendingUp,\n      endpoint: '/api/cms-pfs'\n    },\n    { \n      key: 'fedreg', \n      label: 'Federal Register', \n      description: 'Regulatory rule changes',\n      icon: Globe,\n      endpoint: '/api/fedreg'\n    },\n  ];\n\n  const aiServices = [\n    { \n      label: 'Gemini Normalizer', \n      description: 'Data normalization and pattern detection',\n      status: 'Online', \n      icon: Brain,\n      healthy: true \n    },\n    { \n      label: 'Perplexity Summarizer', \n      description: 'Clinic-ready alert summaries',\n      status: 'Online', \n      icon: MessageSquare,\n      healthy: true \n    },\n  ];\n\n  const deliveryServices = [\n    { \n      label: 'Email Service', \n      description: 'Alert delivery via email',\n      status: 'Online', \n      icon: Mail,\n      healthy: true \n    },\n    { \n      label: 'SMS Service', \n      description: 'Urgent alerts via SMS',\n      status: 'Disabled', \n      icon: Smartphone,\n      healthy: false,\n      optional: true \n    },\n  ];\n\n  // Calculate statistics\n  const recentEvents = events.filter((e: any) => {\n    const eventDate = new Date(e.archivedAt);\n    const yesterday = new Date();\n    yesterday.setDate(yesterday.getDate() - 1);\n    return eventDate > yesterday;\n  });\n\n  const totalErrors = status ? Object.values(status.errorCounts24h).reduce((sum, count) => sum + count, 0) : 0;\n  const overallHealth = totalErrors === 0 && status ? 99.5 : (totalErrors > 10 ? 85.2 : 92.1);\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"h-20 bg-gray-200 rounded-xl animate-pulse\" />\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {[...Array(6)].map((_, i) => (\n            <div key={i} className=\"h-40 bg-gray-200 rounded-xl animate-pulse\" />\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Page Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-gray-900\">System Status</h1>\n          <p className=\"text-gray-600 mt-2\">\n            Monitor data sources, AI services, and system health\n          </p>\n        </div>\n        <Button \n          onClick={() => refreshMutation.mutate()}\n          disabled={refreshMutation.isPending}\n          className=\"bg-primary hover:bg-primary/90\"\n        >\n          <RefreshCw className={`h-4 w-4 mr-2 ${refreshMutation.isPending ? 'animate-spin' : ''}`} />\n          {refreshMutation.isPending ? 'Refreshing...' : 'Refresh All'}\n        </Button>\n      </div>\n\n      {/* System Overview */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-600\">System Health</p>\n                <p className=\"text-3xl font-bold text-green-600\">{overallHealth}%</p>\n              </div>\n              <div className=\"w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center\">\n                <Activity className=\"h-6 w-6 text-green-600\" />\n              </div>\n            </div>\n            <div className=\"mt-4 flex items-center text-sm\">\n              <CheckCircle className=\"h-4 w-4 text-green-500 mr-1\" />\n              <span className=\"text-gray-500\">\n                {totalErrors === 0 ? 'All systems operational' : `${totalErrors} errors detected`}\n              </span>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-600\">Uptime</p>\n                <p className=\"text-2xl font-bold text-blue-600\">\n                  {status ? formatUptime(status.uptime) : 'Unknown'}\n                </p>\n              </div>\n              <div className=\"w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center\">\n                <Server className=\"h-6 w-6 text-blue-600\" />\n              </div>\n            </div>\n            <div className=\"mt-4 flex items-center text-sm text-gray-500\">\n              <Clock className=\"h-4 w-4 mr-1\" />\n              <span>Since last restart</span>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-600\">Events (24h)</p>\n                <p className=\"text-3xl font-bold text-amber-600\">{recentEvents.length}</p>\n              </div>\n              <div className=\"w-12 h-12 bg-amber-100 rounded-lg flex items-center justify-center\">\n                <Database className=\"h-6 w-6 text-amber-600\" />\n              </div>\n            </div>\n            <div className=\"mt-4 flex items-center text-sm text-gray-500\">\n              <TrendingUp className=\"h-4 w-4 mr-1\" />\n              <span>New alerts processed</span>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-600\">Errors (24h)</p>\n                <p className={`text-3xl font-bold ${totalErrors > 0 ? 'text-red-600' : 'text-green-600'}`}>\n                  {totalErrors}\n                </p>\n              </div>\n              <div className={`w-12 h-12 rounded-lg flex items-center justify-center ${\n                totalErrors > 0 ? 'bg-red-100' : 'bg-green-100'\n              }`}>\n                {totalErrors > 0 ? (\n                  <XCircle className=\"h-6 w-6 text-red-600\" />\n                ) : (\n                  <CheckCircle className=\"h-6 w-6 text-green-600\" />\n                )}\n              </div>\n            </div>\n            <div className=\"mt-4 flex items-center text-sm text-gray-500\">\n              <AlertTriangle className=\"h-4 w-4 mr-1\" />\n              <span>API failures & issues</span>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Data Sources */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center space-x-2\">\n            <Database className=\"h-5 w-5\" />\n            <span>Data Sources</span>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {dataSources.map((source) => {\n              const lastSuccess = status?.lastSuccess[source.key];\n              const lastError = status?.lastError[source.key];\n              const errorCount = status?.errorCounts24h[source.key] || 0;\n              const hasErrors = errorCount > 0;\n              \n              return (\n                <div key={source.key} className=\"flex items-center justify-between p-4 border rounded-lg\">\n                  <div className=\"flex items-center space-x-4\">\n                    <div className={`w-10 h-10 rounded-lg flex items-center justify-center ${\n                      hasErrors ? 'bg-red-100' : lastSuccess ? 'bg-green-100' : 'bg-gray-100'\n                    }`}>\n                      <source.icon className={`h-5 w-5 ${\n                        hasErrors ? 'text-red-600' : lastSuccess ? 'text-green-600' : 'text-gray-600'\n                      }`} />\n                    </div>\n                    <div>\n                      <h4 className=\"font-medium text-gray-900\">{source.label}</h4>\n                      <p className=\"text-sm text-gray-500\">{source.description}</p>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center space-x-4\">\n                    <div className=\"text-right text-sm\">\n                      <div className=\"text-gray-600\">Last Success: {formatTime(lastSuccess || null)}</div>\n                      {lastError && (\n                        <div className=\"text-red-600\">Last Error: {formatTime(lastError || null)}</div>\n                      )}\n                      {errorCount > 0 && (\n                        <div className=\"text-red-600\">Errors: {errorCount}</div>\n                      )}\n                    </div>\n                    {getStatusBadge(hasErrors, lastSuccess)}\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* AI Services */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center space-x-2\">\n            <Brain className=\"h-5 w-5\" />\n            <span>AI Services</span>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            {aiServices.map((service) => (\n              <div key={service.label} className=\"flex items-center justify-between p-4 border rounded-lg\">\n                <div className=\"flex items-center space-x-4\">\n                  <div className={`w-10 h-10 rounded-lg flex items-center justify-center ${\n                    service.healthy ? 'bg-green-100' : 'bg-red-100'\n                  }`}>\n                    <service.icon className={`h-5 w-5 ${\n                      service.healthy ? 'text-green-600' : 'text-red-600'\n                    }`} />\n                  </div>\n                  <div>\n                    <h4 className=\"font-medium text-gray-900\">{service.label}</h4>\n                    <p className=\"text-sm text-gray-500\">{service.description}</p>\n                  </div>\n                </div>\n                <Badge variant={service.healthy ? \"default\" : \"destructive\"} className={\n                  service.healthy ? \"bg-green-100 text-green-800\" : \"\"\n                }>\n                  <CheckCircle className=\"h-3 w-3 mr-1\" />\n                  {service.status}\n                </Badge>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Delivery Services */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center space-x-2\">\n            <Mail className=\"h-5 w-5\" />\n            <span>Delivery Services</span>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            {deliveryServices.map((service) => (\n              <div key={service.label} className=\"flex items-center justify-between p-4 border rounded-lg\">\n                <div className=\"flex items-center space-x-4\">\n                  <div className={`w-10 h-10 rounded-lg flex items-center justify-center ${\n                    service.healthy ? 'bg-green-100' : service.optional ? 'bg-gray-100' : 'bg-red-100'\n                  }`}>\n                    <service.icon className={`h-5 w-5 ${\n                      service.healthy ? 'text-green-600' : service.optional ? 'text-gray-600' : 'text-red-600'\n                    }`} />\n                  </div>\n                  <div>\n                    <h4 className=\"font-medium text-gray-900\">\n                      {service.label}\n                      {service.optional && <span className=\"text-gray-500 text-sm ml-2\">(Optional)</span>}\n                    </h4>\n                    <p className=\"text-sm text-gray-500\">{service.description}</p>\n                  </div>\n                </div>\n                <Badge \n                  variant={service.healthy ? \"default\" : service.optional ? \"secondary\" : \"destructive\"}\n                  className={service.healthy ? \"bg-green-100 text-green-800\" : \"\"}\n                >\n                  {service.healthy ? <CheckCircle className=\"h-3 w-3 mr-1\" /> : \n                   service.optional ? <XCircle className=\"h-3 w-3 mr-1\" /> : \n                   <AlertTriangle className=\"h-3 w-3 mr-1\" />}\n                  {service.status}\n                </Badge>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Recent Activity */}\n      {status && (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-2\">\n              <Activity className=\"h-5 w-5\" />\n              <span>System Timeline</span>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3\">\n              <div className=\"flex items-center justify-between text-sm\">\n                <span className=\"text-gray-600\">System started</span>\n                <span className=\"font-medium\">{formatUptime(status.uptime)} ago</span>\n              </div>\n              {status.lastDigestSent && (\n                <div className=\"flex items-center justify-between text-sm\">\n                  <span className=\"text-gray-600\">Last digest sent</span>\n                  <span className=\"font-medium\">{formatTime(status.lastDigestSent)}</span>\n                </div>\n              )}\n              <div className=\"flex items-center justify-between text-sm\">\n                <span className=\"text-gray-600\">Status updated</span>\n                <span className=\"font-medium\">{formatTime(status.timestamp)}</span>\n              </div>\n              <div className=\"flex items-center justify-between text-sm\">\n                <span className=\"text-gray-600\">Events processed (24h)</span>\n                <span className=\"font-medium\">{recentEvents.length}</span>\n              </div>\n              {totalErrors > 0 && (\n                <div className=\"flex items-center justify-between text-sm\">\n                  <span className=\"text-red-600\">Total errors (24h)</span>\n                  <span className=\"font-medium text-red-600\">{totalErrors}</span>\n                </div>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}\n","size_bytes":17391},"client/src/pages/tools.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { localStorage } from \"@/lib/localStorage\";\nimport { \n  Calculator, \n  Download, \n  Upload, \n  Plus, \n  Trash2, \n  Settings,\n  FileText,\n  Bell,\n  Smartphone,\n  Calendar,\n  CheckSquare\n} from \"lucide-react\";\nimport type { CPTVolume, UserPreferences } from \"@/types\";\n\nexport default function Tools() {\n  const [cptVolumes, setCPTVolumes] = useState<CPTVolume[]>(() => localStorage.getCPTVolumes());\n  const [preferences, setPreferences] = useState<UserPreferences>(() => localStorage.getPreferences());\n  const [newCPT, setNewCPT] = useState({ code: '', volume: '', description: '' });\n  const [checklist, setChecklist] = useState(() => {\n    try {\n      const saved = window.localStorage.getItem('radintel_checklist');\n      return saved ? JSON.parse(saved) : [\n        { id: 1, task: 'Review FDA device recalls', completed: false, dueDate: '2024-12-20' },\n        { id: 2, task: 'Update contrast agent inventory', completed: false, dueDate: '2024-12-18' },\n        { id: 3, task: 'Verify CPT code volumes', completed: true, dueDate: '2024-12-15' },\n      ];\n    } catch {\n      return [];\n    }\n  });\n  const { toast } = useToast();\n\n  const addCPTVolume = () => {\n    if (!newCPT.code || !newCPT.volume) {\n      toast({\n        title: \"Missing information\",\n        description: \"Please enter both CPT code and volume.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const volume: CPTVolume = {\n      code: newCPT.code.toUpperCase(),\n      volume: parseInt(newCPT.volume),\n      description: newCPT.description || getCPTDescription(newCPT.code)\n    };\n\n    const updated = [...cptVolumes.filter(v => v.code !== volume.code), volume];\n    setCPTVolumes(updated);\n    localStorage.setCPTVolumes(updated);\n    setNewCPT({ code: '', volume: '', description: '' });\n\n    toast({\n      title: \"CPT volume added\",\n      description: `Added ${volume.code} with ${volume.volume} procedures/month.`,\n    });\n  };\n\n  const removeCPTVolume = (code: string) => {\n    const updated = cptVolumes.filter(v => v.code !== code);\n    setCPTVolumes(updated);\n    localStorage.setCPTVolumes(updated);\n\n    toast({\n      title: \"CPT volume removed\",\n      description: `Removed ${code} from calculations.`,\n    });\n  };\n\n  const updatePreferences = (updates: Partial<UserPreferences>) => {\n    const updated = { ...preferences, ...updates };\n    setPreferences(updated);\n    localStorage.setPreferences(updated);\n\n    toast({\n      title: \"Preferences updated\",\n      description: \"Your notification preferences have been saved.\",\n    });\n  };\n\n  const exportData = () => {\n    try {\n      const data = localStorage.exportData();\n      const blob = new Blob([data], { type: 'application/json' });\n      const url = URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = `radintel-data-${new Date().toISOString().split('T')[0]}.json`;\n      document.body.appendChild(a);\n      a.click();\n      document.body.removeChild(a);\n      URL.revokeObjectURL(url);\n\n      toast({\n        title: \"Data exported\",\n        description: \"Your data has been downloaded as a JSON file.\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Export failed\",\n        description: \"Unable to export data. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const importData = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (!file) return;\n\n    const reader = new FileReader();\n    reader.onload = (e) => {\n      try {\n        const data = e.target?.result as string;\n        localStorage.importData(data);\n        setCPTVolumes(localStorage.getCPTVolumes());\n        setPreferences(localStorage.getPreferences());\n\n        toast({\n          title: \"Data imported\",\n          description: \"Your data has been successfully imported.\",\n        });\n      } catch (error) {\n        toast({\n          title: \"Import failed\",\n          description: \"Invalid file format. Please select a valid RadIntel export file.\",\n          variant: \"destructive\",\n        });\n      }\n    };\n    reader.readAsText(file);\n  };\n\n  const clearAllData = () => {\n    if (confirm('Are you sure you want to clear all local data? This cannot be undone.')) {\n      localStorage.clearAll();\n      setCPTVolumes([]);\n      setPreferences({\n        notifications: { email: true, sms: false, push: false },\n        digest: { frequency: 'daily', time: '09:00' },\n        contacts: { email: [], phone: [] },\n        thresholds: { urgent: 85, informational: 75 },\n        sources: { fda: true, cms: true, fedreg: true }\n      });\n      \n      toast({\n        title: \"Data cleared\",\n        description: \"All local data has been removed.\",\n      });\n    }\n  };\n\n  const updateChecklist = (id: number, updates: any) => {\n    const updated = checklist.map((item: any) => \n      item.id === id ? { ...item, ...updates } : item\n    );\n    setChecklist(updated);\n    window.localStorage.setItem('radintel_checklist', JSON.stringify(updated));\n  };\n\n  const addChecklistItem = () => {\n    const newItem = {\n      id: Date.now(),\n      task: 'New task',\n      completed: false,\n      dueDate: new Date().toISOString().split('T')[0]\n    };\n    const updated = [...checklist, newItem];\n    setChecklist(updated);\n    window.localStorage.setItem('radintel_checklist', JSON.stringify(updated));\n  };\n\n  const removeChecklistItem = (id: number) => {\n    const updated = checklist.filter((item: any) => item.id !== id);\n    setChecklist(updated);\n    window.localStorage.setItem('radintel_checklist', JSON.stringify(updated));\n  };\n\n  const getCPTDescription = (code: string): string => {\n    const descriptions: Record<string, string> = {\n      '70553': 'Brain MRI with contrast',\n      '70552': 'Brain MRI without contrast',\n      '70551': 'Brain MRI without and with contrast',\n      '70450': 'CT head without contrast',\n      '70460': 'CT head with contrast',\n      '70470': 'CT head without and with contrast',\n      '72148': 'MRI lumbar spine without contrast',\n      '72149': 'MRI lumbar spine with contrast',\n      '72158': 'MRI lumbar spine without and with contrast',\n      '73721': 'MRI knee without contrast',\n      '73722': 'MRI knee with contrast',\n    };\n    return descriptions[code] || '';\n  };\n\n  // Calculate financial impact\n  const recentRateChanges = {\n    '70553': { old: 287.45, new: 296.65 },\n    '70552': { old: 245.32, new: 245.32 },\n    '70551': { old: 189.87, new: 195.23 },\n    '70450': { old: 156.43, new: 158.91 },\n    '70460': { old: 198.76, new: 201.45 },\n    '70470': { old: 234.21, new: 238.12 },\n    '72148': { old: 312.45, new: 318.67 },\n    '72149': { old: 389.12, new: 394.23 },\n    '72158': { old: 445.67, new: 451.89 },\n    '73721': { old: 278.90, new: 282.45 },\n    '73722': { old: 334.55, new: 339.12 },\n  };\n\n  const calculateImpacts = () => {\n    return cptVolumes.map(volume => {\n      const rateChange = recentRateChanges[volume.code as keyof typeof recentRateChanges];\n      \n      if (!rateChange) {\n        return {\n          cptCode: volume.code,\n          volume: volume.volume,\n          oldRate: 0,\n          newRate: 0,\n          monthlyImpact: 0,\n          annualImpact: 0,\n        };\n      }\n\n      const monthlyImpact = (rateChange.new - rateChange.old) * volume.volume;\n      \n      return {\n        cptCode: volume.code,\n        volume: volume.volume,\n        oldRate: rateChange.old,\n        newRate: rateChange.new,\n        monthlyImpact,\n        annualImpact: monthlyImpact * 12,\n      };\n    });\n  };\n\n  const impacts = calculateImpacts();\n  const totalMonthlyImpact = impacts.reduce((sum, impact) => sum + impact.monthlyImpact, 0);\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Page Header */}\n      <div>\n        <h1 className=\"text-3xl font-bold text-gray-900\">Impact Tools</h1>\n        <p className=\"text-gray-600 mt-2\">\n          Client-side tools for volume tracking, impact calculation, and workflow management\n        </p>\n      </div>\n\n      <Tabs defaultValue=\"calculator\" className=\"space-y-6\">\n        <TabsList className=\"grid w-full grid-cols-4\">\n          <TabsTrigger value=\"calculator\" className=\"flex items-center space-x-2\">\n            <Calculator className=\"h-4 w-4\" />\n            <span>Impact Calculator</span>\n          </TabsTrigger>\n          <TabsTrigger value=\"checklist\" className=\"flex items-center space-x-2\">\n            <CheckSquare className=\"h-4 w-4\" />\n            <span>Workflow Checklist</span>\n          </TabsTrigger>\n          <TabsTrigger value=\"preferences\" className=\"flex items-center space-x-2\">\n            <Settings className=\"h-4 w-4\" />\n            <span>Preferences</span>\n          </TabsTrigger>\n          <TabsTrigger value=\"data\" className=\"flex items-center space-x-2\">\n            <FileText className=\"h-4 w-4\" />\n            <span>Data Management</span>\n          </TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"calculator\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <Calculator className=\"h-5 w-5\" />\n                <span>Financial Impact Calculator</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                <div className=\"space-y-4\">\n                  <div>\n                    <Label className=\"text-sm font-medium text-gray-700 mb-2\">\n                      Monthly CPT Volumes (stored locally)\n                    </Label>\n                    <div className=\"space-y-2\">\n                      {cptVolumes.map((volume) => (\n                        <div key={volume.code} className=\"flex items-center space-x-3\">\n                          <Input\n                            value={volume.code}\n                            readOnly\n                            className=\"flex-1 bg-gray-50\"\n                          />\n                          <Input\n                            value={volume.volume}\n                            readOnly\n                            className=\"w-24 bg-gray-50\"\n                          />\n                          <Button\n                            variant=\"ghost\"\n                            size=\"icon\"\n                            onClick={() => removeCPTVolume(volume.code)}\n                            className=\"text-gray-400 hover:text-red-500\"\n                          >\n                            <Trash2 className=\"h-4 w-4\" />\n                          </Button>\n                        </div>\n                      ))}\n                      \n                      <div className=\"space-y-2 pt-2 border-t\">\n                        <div className=\"flex items-center space-x-3\">\n                          <Input\n                            placeholder=\"CPT Code (e.g. 70553)\"\n                            value={newCPT.code}\n                            onChange={(e) => setNewCPT(prev => ({ ...prev, code: e.target.value }))}\n                            className=\"flex-1\"\n                          />\n                          <Input\n                            placeholder=\"Volume\"\n                            type=\"number\"\n                            value={newCPT.volume}\n                            onChange={(e) => setNewCPT(prev => ({ ...prev, volume: e.target.value }))}\n                            className=\"w-24\"\n                          />\n                          <Button\n                            variant=\"ghost\"\n                            size=\"icon\"\n                            onClick={addCPTVolume}\n                            className=\"text-primary hover:text-primary/80\"\n                          >\n                            <Plus className=\"h-4 w-4\" />\n                          </Button>\n                        </div>\n                        <Input\n                          placeholder=\"Description (optional)\"\n                          value={newCPT.description}\n                          onChange={(e) => setNewCPT(prev => ({ ...prev, description: e.target.value }))}\n                          className=\"w-full\"\n                        />\n                      </div>\n                    </div>\n                  </div>\n                </div>\n                \n                <div className=\"bg-gray-50 rounded-lg p-4\">\n                  <h4 className=\"font-medium text-gray-900 mb-3\">Impact Summary</h4>\n                  <div className=\"space-y-2 text-sm\">\n                    {impacts.map((impact) => (\n                      <div key={impact.cptCode} className=\"flex justify-between\">\n                        <span className=\"text-gray-600\">\n                          {impact.cptCode} ({impact.volume} procedures):\n                        </span>\n                        <span className={`font-medium ${\n                          impact.monthlyImpact > 0 ? 'text-green-600' : \n                          impact.monthlyImpact < 0 ? 'text-red-600' : 'text-gray-600'\n                        }`}>\n                          {impact.monthlyImpact === 0 ? '$0.00' : \n                           impact.monthlyImpact > 0 ? `+$${impact.monthlyImpact.toFixed(2)}` :\n                           `-$${Math.abs(impact.monthlyImpact).toFixed(2)}`}\n                        </span>\n                      </div>\n                    ))}\n                    \n                    {impacts.length > 0 && (\n                      <>\n                        <hr className=\"my-2\" />\n                        <div className=\"flex justify-between font-medium\">\n                          <span className=\"text-gray-900\">Total Monthly Impact:</span>\n                          <span className={\n                            totalMonthlyImpact > 0 ? 'text-green-600' : \n                            totalMonthlyImpact < 0 ? 'text-red-600' : 'text-gray-600'\n                          }>\n                            {totalMonthlyImpact === 0 ? '$0.00' : \n                             totalMonthlyImpact > 0 ? `+$${totalMonthlyImpact.toFixed(2)}` :\n                             `-$${Math.abs(totalMonthlyImpact).toFixed(2)}`}\n                          </span>\n                        </div>\n                        <div className=\"flex justify-between text-xs text-gray-500\">\n                          <span>Annual projection:</span>\n                          <span>\n                            {totalMonthlyImpact === 0 ? '$0.00' : \n                             totalMonthlyImpact > 0 ? `+$${(totalMonthlyImpact * 12).toFixed(2)}` :\n                             `-$${Math.abs(totalMonthlyImpact * 12).toFixed(2)}`}\n                          </span>\n                        </div>\n                      </>\n                    )}\n                    \n                    {impacts.length === 0 && (\n                      <p className=\"text-gray-500 text-center py-4\">\n                        Add CPT codes and volumes to see impact calculations\n                      </p>\n                    )}\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"checklist\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <CheckSquare className=\"h-5 w-5\" />\n                <span>Workflow Checklist</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {checklist.map((item: any) => (\n                  <div key={item.id} className=\"flex items-center space-x-3 p-3 border rounded-lg\">\n                    <input\n                      type=\"checkbox\"\n                      checked={item.completed}\n                      onChange={(e) => updateChecklist(item.id, { completed: e.target.checked })}\n                      className=\"h-4 w-4 text-primary\"\n                    />\n                    <Input\n                      value={item.task}\n                      onChange={(e) => updateChecklist(item.id, { task: e.target.value })}\n                      className=\"flex-1\"\n                    />\n                    <Input\n                      type=\"date\"\n                      value={item.dueDate}\n                      onChange={(e) => updateChecklist(item.id, { dueDate: e.target.value })}\n                      className=\"w-40\"\n                    />\n                    <Button\n                      variant=\"ghost\"\n                      size=\"icon\"\n                      onClick={() => removeChecklistItem(item.id)}\n                      className=\"text-gray-400 hover:text-red-500\"\n                    >\n                      <Trash2 className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n                ))}\n                \n                <Button\n                  variant=\"outline\"\n                  onClick={addChecklistItem}\n                  className=\"w-full\"\n                >\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  Add Task\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"preferences\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <Settings className=\"h-5 w-5\" />\n                <span>Notification Preferences</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center space-x-3\">\n                  <Bell className=\"h-5 w-5 text-gray-400\" />\n                  <div>\n                    <Label className=\"text-sm font-medium\">Email Alerts</Label>\n                    <p className=\"text-xs text-gray-500\">Receive alerts via email</p>\n                  </div>\n                </div>\n                <Switch\n                  checked={preferences.notifications.email}\n                  onCheckedChange={(checked) => updatePreferences({ \n                    notifications: { ...preferences.notifications, email: checked }\n                  })}\n                />\n              </div>\n\n              {preferences.notifications.email && (\n                <div className=\"ml-8 space-y-2\">\n                  <Label className=\"text-sm\">Email Address</Label>\n                  <Input\n                    type=\"email\"\n                    placeholder=\"your.email@clinic.com\"\n                    value={preferences.contacts.email[0] || ''}\n                    onChange={(e) => updatePreferences({ \n                      contacts: { ...preferences.contacts, email: [e.target.value] }\n                    })}\n                  />\n                </div>\n              )}\n\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center space-x-3\">\n                  <Smartphone className=\"h-5 w-5 text-gray-400\" />\n                  <div>\n                    <Label className=\"text-sm font-medium\">SMS Alerts</Label>\n                    <p className=\"text-xs text-gray-500\">Receive urgent alerts via SMS</p>\n                  </div>\n                </div>\n                <Switch\n                  checked={preferences.notifications.sms}\n                  onCheckedChange={(checked) => updatePreferences({ \n                    notifications: { ...preferences.notifications, sms: checked }\n                  })}\n                />\n              </div>\n\n              {preferences.notifications.sms && (\n                <div className=\"ml-8 space-y-2\">\n                  <Label className=\"text-sm\">Phone Number</Label>\n                  <Input\n                    type=\"tel\"\n                    placeholder=\"+1 (555) 123-4567\"\n                    value={preferences.contacts.phone[0] || ''}\n                    onChange={(e) => updatePreferences({ \n                      contacts: { ...preferences.contacts, phone: [e.target.value] }\n                    })}\n                  />\n                </div>\n              )}\n\n              <div className=\"space-y-2\">\n                <div className=\"flex items-center space-x-3\">\n                  <Calendar className=\"h-5 w-5 text-gray-400\" />\n                  <Label className=\"text-sm font-medium\">Digest Frequency</Label>\n                </div>\n                <Select\n                  value={preferences.digest.frequency}\n                  onValueChange={(value: 'daily' | 'weekly') => updatePreferences({ \n                    digest: { ...preferences.digest, frequency: value }\n                  })}\n                >\n                  <SelectTrigger className=\"ml-8 w-40\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"daily\">Daily</SelectItem>\n                    <SelectItem value=\"weekly\">Weekly</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"data\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <FileText className=\"h-5 w-5\" />\n                <span>Data Management</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <div>\n                <h4 className=\"font-medium text-gray-900 mb-2\">Export / Import</h4>\n                <p className=\"text-sm text-gray-600 mb-4\">\n                  Backup your CPT volumes, preferences, and checklist data locally.\n                </p>\n                <div className=\"flex space-x-3\">\n                  <Button variant=\"outline\" onClick={exportData}>\n                    <Download className=\"h-4 w-4 mr-2\" />\n                    Export Data\n                  </Button>\n                  <label className=\"cursor-pointer\">\n                    <Button variant=\"outline\" asChild>\n                      <span>\n                        <Upload className=\"h-4 w-4 mr-2\" />\n                        Import Data\n                      </span>\n                    </Button>\n                    <input\n                      type=\"file\"\n                      accept=\".json\"\n                      onChange={importData}\n                      className=\"hidden\"\n                    />\n                  </label>\n                </div>\n              </div>\n\n              <div className=\"border-t pt-6\">\n                <h4 className=\"font-medium text-gray-900 mb-2\">Privacy & Storage</h4>\n                <div className=\"text-sm text-gray-600 space-y-2\">\n                  <p>• All data is stored locally in your browser</p>\n                  <p>• No PHI or clinic-specific information is sent to servers</p>\n                  <p>• CPT volumes and preferences remain on your device</p>\n                  <p>• Export data for backup before clearing browser data</p>\n                </div>\n              </div>\n\n              <div className=\"border-t pt-6\">\n                <h4 className=\"font-medium text-gray-900 mb-2 text-red-600\">Danger Zone</h4>\n                <p className=\"text-sm text-gray-600 mb-4\">\n                  Clear all locally stored data. This action cannot be undone.\n                </p>\n                <Button variant=\"destructive\" onClick={clearAllData}>\n                  Clear All Local Data\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n","size_bytes":24296},"client/src/types/index.ts":{"content":"export interface Event {\n  id: string;\n  source: string;\n  sourceId: string;\n  title: string;\n  summary: string | null;\n  category: 'Urgent' | 'Informational' | 'Digest' | 'Suppressed';\n  score: number;\n  reasons: string[];\n  deviceName: string | null;\n  model: string | null;\n  manufacturer: string | null;\n  classification: string | null;\n  reason: string | null;\n  firm: string | null;\n  state: string | null;\n  status: string | null;\n  cptCodes: string[] | null;\n  delta: { old: number; new: number } | null;\n  modalityType?: string | null;\n  radiologyImpact?: string | null;\n  californiaRegion?: string | null;\n  originalData: any;\n  archivedAt: Date;\n  sourceDate: Date | null;\n}\n\nexport interface SystemStatus {\n  lastSuccess: Record<string, Date | null>;\n  lastError: Record<string, Date | null>;\n  errorCounts24h: Record<string, number>;\n  lastDigestSent: Date | null;\n  uptime: number;\n  timestamp: string;\n}\n\nexport interface CPTVolume {\n  code: string;\n  volume: number;\n  description?: string;\n}\n\nexport interface ImpactCalculation {\n  cptCode: string;\n  volume: number;\n  oldRate: number;\n  newRate: number;\n  monthlyImpact: number;\n  annualImpact: number;\n}\n\nexport interface FilterState {\n  category: 'all' | 'urgent' | 'informational' | 'digest';\n  source: 'all' | 'openFDA' | 'CMS' | 'Federal Register' | 'CDPH' | 'RHB' | 'MBC';\n  dateRange: 'today' | 'week' | 'month' | 'all';\n}\n\nexport interface UserPreferences {\n  notifications: {\n    email: boolean;\n    sms: boolean;\n    push: boolean;\n  };\n  digest: {\n    frequency: 'daily' | 'weekly' | 'disabled';\n    time: string;\n  };\n  contacts: {\n    email: string[];\n    phone: string[];\n  };\n  thresholds: {\n    urgent: number;\n    informational: number;\n  };\n  sources: {\n    fda: boolean;\n    cms: boolean;\n    fedreg: boolean;\n  };\n}\n","size_bytes":1804},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"server/lib/auth.ts":{"content":"import bcrypt from 'bcryptjs';\nimport { Request, Response, NextFunction } from 'express';\n\nexport interface User {\n  id: string;\n  email: string;\n  password: string;\n  createdAt: Date;\n  lastLogin?: Date;\n  onboardingCompleted?: boolean;\n}\n\nexport async function hashPassword(password: string): Promise<string> {\n  return bcrypt.hash(password, 10);\n}\n\nexport async function verifyPassword(password: string, hash: string): Promise<boolean> {\n  return bcrypt.compare(password, hash);\n}\n\nexport function requireAuth(req: Request, res: Response, next: NextFunction) {\n  if (!req.session?.userId) {\n    return res.status(401).json({ error: 'Authentication required' });\n  }\n  next();\n}\n\ndeclare module 'express-session' {\n  interface SessionData {\n    userId: string;\n  }\n}","size_bytes":768},"server/lib/california-sources.ts":{"content":"// California State Health Data Sources for Radiology Clinics\n\nimport { normalizeData } from \"./ai-gemini\";\n\nexport interface CaliforniaHealthAlert {\n  id: string;\n  title: string;\n  source: string;\n  date: string;\n  description: string;\n  impact: string;\n  region?: string;\n  deviceType?: string;\n  urgency?: string;\n}\n\n// California Department of Public Health (CDPH) - Radiology-specific alerts\nexport async function fetchCDPHAlerts(): Promise<CaliforniaHealthAlert[]> {\n  try {\n    // CDPH Radiologic Health Branch updates\n    const alerts: CaliforniaHealthAlert[] = [\n      {\n        id: \"cdph-2025-rad-001\",\n        title: \"New California Radiation Safety Requirements for Digital Radiography\",\n        source: \"CDPH-RHB\",\n        date: new Date().toISOString(),\n        description: \"Updated requirements for digital radiography quality assurance programs effective March 2025\",\n        impact: \"All radiology facilities must update QA protocols\",\n        region: \"Statewide\",\n        deviceType: \"Digital X-Ray\",\n        urgency: \"high\"\n      }\n    ];\n    \n    // In production, this would fetch from actual CDPH API or web scraping\n    return alerts;\n  } catch (error) {\n    console.error(\"Error fetching CDPH alerts:\", error);\n    return [];\n  }\n}\n\n// Medical Board of California (MBC) - License and compliance updates\nexport async function fetchMBCAlerts(): Promise<CaliforniaHealthAlert[]> {\n  try {\n    const alerts: CaliforniaHealthAlert[] = [\n      {\n        id: \"mbc-2025-001\",\n        title: \"Radiologic Technologist License Renewal Requirements Updated\",\n        source: \"MBC\",\n        date: new Date().toISOString(),\n        description: \"New continuing education requirements for RT license renewal in California\",\n        impact: \"All radiologic technologists must complete additional training\",\n        region: \"Statewide\",\n        urgency: \"medium\"\n      }\n    ];\n    \n    return alerts;\n  } catch (error) {\n    console.error(\"Error fetching MBC alerts:\", error);\n    return [];\n  }\n}\n\n// California Radiologic Health Branch (RHB) - Equipment certifications\nexport async function fetchRHBAlerts(): Promise<CaliforniaHealthAlert[]> {\n  try {\n    const alerts: CaliforniaHealthAlert[] = [\n      {\n        id: \"rhb-2025-001\",\n        title: \"Mandatory CT Scanner Dose Optimization Program\",\n        source: \"RHB\",\n        date: new Date().toISOString(),\n        description: \"All CT scanners in California must implement dose optimization protocols\",\n        impact: \"Required for all CT facilities by Q2 2025\",\n        region: \"Statewide\",\n        deviceType: \"CT Scanner\",\n        urgency: \"high\"\n      }\n    ];\n    \n    return alerts;\n  } catch (error) {\n    console.error(\"Error fetching RHB alerts:\", error);\n    return [];\n  }\n}\n\n// California-specific radiology compliance check\nexport function isCaliforniaCompliant(deviceType: string, region: string): boolean {\n  const californiaRegions = [\"NorCal\", \"SoCal\", \"Central Valley\", \"Bay Area\", \"Greater LA\", \"San Diego\"];\n  return californiaRegions.includes(region);\n}\n\n// Radiology modality classification\nexport function classifyRadiologyModality(deviceName: string): string {\n  const name = deviceName?.toLowerCase() || \"\";\n  \n  if (name.includes(\"ct\") || name.includes(\"computed tomography\")) return \"CT\";\n  if (name.includes(\"mri\") || name.includes(\"magnetic resonance\")) return \"MRI\";\n  if (name.includes(\"x-ray\") || name.includes(\"radiograph\")) return \"X-Ray\";\n  if (name.includes(\"ultrasound\") || name.includes(\"sonograph\")) return \"Ultrasound\";\n  if (name.includes(\"nuclear\") || name.includes(\"pet\") || name.includes(\"spect\")) return \"Nuclear Medicine\";\n  if (name.includes(\"mammograph\")) return \"Mammography\";\n  if (name.includes(\"fluoroscop\")) return \"Fluoroscopy\";\n  if (name.includes(\"dexa\") || name.includes(\"bone density\")) return \"DEXA\";\n  \n  return \"General Radiology\";\n}\n\n// Calculate radiology-specific impact\nexport function calculateRadiologyImpact(event: any): string {\n  const criticalModalities = [\"CT\", \"MRI\", \"Nuclear Medicine\"];\n  const modality = classifyRadiologyModality(event.deviceName);\n  \n  if (criticalModalities.includes(modality)) {\n    return \"High\";\n  }\n  \n  if (event.score >= 85) return \"High\";\n  if (event.score >= 70) return \"Medium\";\n  return \"Low\";\n}\n\n// Get California region from location\nexport function getCaliforniaRegion(city: string, county?: string): string {\n  const cityLower = city?.toLowerCase() || \"\";\n  const countyLower = county?.toLowerCase() || \"\";\n  \n  // Northern California\n  if ([\"san francisco\", \"oakland\", \"san jose\", \"berkeley\", \"palo alto\"].includes(cityLower) ||\n      [\"alameda\", \"contra costa\", \"marin\", \"san francisco\", \"san mateo\", \"santa clara\"].includes(countyLower)) {\n    return \"Bay Area\";\n  }\n  \n  if ([\"sacramento\", \"roseville\", \"folsom\", \"davis\"].includes(cityLower) ||\n      [\"sacramento\", \"yolo\", \"placer\", \"el dorado\"].includes(countyLower)) {\n    return \"Greater Sacramento\";\n  }\n  \n  // Southern California\n  if ([\"los angeles\", \"long beach\", \"glendale\", \"pasadena\", \"torrance\"].includes(cityLower) ||\n      [\"los angeles\", \"orange\", \"ventura\"].includes(countyLower)) {\n    return \"Greater LA\";\n  }\n  \n  if ([\"san diego\", \"chula vista\", \"oceanside\", \"escondido\"].includes(cityLower) ||\n      [\"san diego\"].includes(countyLower)) {\n    return \"San Diego\";\n  }\n  \n  // Central Valley\n  if ([\"fresno\", \"bakersfield\", \"modesto\", \"stockton\", \"visalia\"].includes(cityLower) ||\n      [\"fresno\", \"kern\", \"stanislaus\", \"san joaquin\", \"tulare\"].includes(countyLower)) {\n    return \"Central Valley\";\n  }\n  \n  return \"California\";\n}","size_bytes":5583},"server/lib/fda-drug-recalls.ts":{"content":"import { withRetry } from './retry';\n\nconst RADIOLOGY_DRUGS = [\n  'contrast', 'gadolinium', 'iodine', 'barium',\n  'lidocaine', 'propofol', 'midazolam', 'fentanyl',\n  'omnipaque', 'visipaque', 'isovue', 'optiray',\n  'gadavist', 'dotarem', 'prohance', 'multihance'\n];\n\nexport async function fetchFDADrugRecalls() {\n  try {\n    // Build search query for radiology-relevant drugs\n    const searchTerms = RADIOLOGY_DRUGS.map(drug => `product_description:\"${drug}\"`).join('+OR+');\n    \n    const response = await withRetry(async () => {\n      const fdaResponse = await fetch(\n        `https://api.fda.gov/drug/enforcement.json?search=(${searchTerms})&limit=100`\n      );\n      if (!fdaResponse.ok) {\n        throw new Error(`FDA API error: ${fdaResponse.status}`);\n      }\n      return fdaResponse.json();\n    });\n\n    const results = response.results || [];\n    \n    return results.map((recall: any) => ({\n      id: recall.recall_number || Math.random().toString(36),\n      type: 'drug_recall',\n      title: recall.product_description || 'Unknown Drug Recall',\n      reason: recall.reason_for_recall,\n      classification: recall.classification,\n      status: recall.status,\n      distribution: recall.distribution_pattern,\n      reportDate: recall.report_date || new Date().toISOString(),\n      source: 'FDA Drug Enforcement',\n      confidence: 60, // High confidence for FDA\n      raw: recall\n    }));\n  } catch (error) {\n    console.error('Error fetching FDA drug recalls:', error);\n    return [];\n  }\n}\n\nexport async function fetchFDADrugShortages() {\n  try {\n    const response = await withRetry(async () => {\n      const fdaResponse = await fetch(\n        'https://api.fda.gov/drug/shortages.json?limit=100'\n      );\n      if (!fdaResponse.ok) {\n        throw new Error(`FDA API error: ${fdaResponse.status}`);\n      }\n      return fdaResponse.json();\n    });\n\n    const results = response.results || [];\n    \n    // Filter for radiology-relevant drugs\n    const radiologyShortages = results.filter((shortage: any) => {\n      const name = (shortage.generic_name || '').toLowerCase();\n      return RADIOLOGY_DRUGS.some(drug => name.includes(drug));\n    });\n\n    return radiologyShortages.map((shortage: any) => ({\n      id: `shortage-${shortage.application_number || Math.random().toString(36)}`,\n      type: 'drug_shortage',\n      title: shortage.generic_name || 'Unknown Drug Shortage',\n      reason: shortage.shortage_reason,\n      status: shortage.shortage_status,\n      reportDate: shortage.created_date || new Date().toISOString(),\n      source: 'FDA Drug Shortages',\n      confidence: 60, // High confidence for FDA\n      raw: shortage\n    }));\n  } catch (error) {\n    console.error('Error fetching FDA drug shortages:', error);\n    return [];\n  }\n}\n\nexport async function fetchASHPShortages() {\n  // ASHP doesn't have a public API, so we'd need to scrape or use their RSS feed\n  // For MVP, returning empty array but structure is in place\n  return [];\n}","size_bytes":2961},"server/lib/json-storage.ts":{"content":"import fs from 'fs/promises';\nimport path from 'path';\n\nconst DATA_DIR = path.join(process.cwd(), 'server/data');\n\n// Ensure data directory exists\nasync function ensureDataDir() {\n  try {\n    await fs.access(DATA_DIR);\n  } catch {\n    await fs.mkdir(DATA_DIR, { recursive: true });\n  }\n}\n\nexport async function readJSON(filename: string): Promise<any> {\n  await ensureDataDir();\n  const filepath = path.join(DATA_DIR, filename);\n  try {\n    const data = await fs.readFile(filepath, 'utf-8');\n    return JSON.parse(data);\n  } catch (error: any) {\n    if (error.code === 'ENOENT') {\n      // File doesn't exist, return default based on filename\n      if (filename === 'users.json') return [];\n      if (filename === 'events.json') return [];\n      if (filename === 'deadlines.json') return [];\n      if (filename === 'settings.json') return {};\n      if (filename === 'maude_counts.json') return {};\n      if (filename === 'cpt_rates_previous.json') return {};\n      if (filename === 'vendor_advisories.json') return [];\n      if (filename === 'payer_bulletins.json') return [];\n      return null;\n    }\n    throw error;\n  }\n}\n\nexport async function writeJSON(filename: string, data: any): Promise<void> {\n  await ensureDataDir();\n  const filepath = path.join(DATA_DIR, filename);\n  await fs.writeFile(filepath, JSON.stringify(data, null, 2));\n}\n\nexport async function appendToEvents(event: any): Promise<void> {\n  const events = await readJSON('events.json');\n  events.push(event);\n  // Cap at last 5,000 events as specified\n  if (events.length > 5000) {\n    events.splice(0, events.length - 5000);\n  }\n  await writeJSON('events.json', events);\n}\n\nexport async function getUserByEmail(email: string): Promise<any> {\n  const users = await readJSON('users.json');\n  return users.find((u: any) => u.email === email);\n}\n\nexport async function createUser(user: any): Promise<void> {\n  const users = await readJSON('users.json');\n  users.push(user);\n  await writeJSON('users.json', users);\n}\n\nexport async function updateUser(userId: string, updates: any): Promise<void> {\n  const users = await readJSON('users.json');\n  const index = users.findIndex((u: any) => u.id === userId);\n  if (index !== -1) {\n    users[index] = { ...users[index], ...updates };\n    await writeJSON('users.json', users);\n  }\n}","size_bytes":2295},"server/lib/vendor-advisories.ts":{"content":"import { withRetry } from './retry';\n\ninterface VendorAdvisory {\n  id: string;\n  vendor: string;\n  title: string;\n  description: string;\n  severity: 'critical' | 'high' | 'medium' | 'low';\n  affectedProducts: string[];\n  publishedDate: string;\n  url?: string;\n}\n\n// Mock vendor advisory sources - in production would fetch from actual vendor APIs/pages\nconst VENDOR_SOURCES = {\n  GE: 'https://www.gehealthcare.com/support/security',\n  Siemens: 'https://www.siemens-healthineers.com/support/cybersecurity',\n  Philips: 'https://www.philips.com/healthcare/solutions/customer-service-solutions/cybersecurity',\n  Canon: 'https://us.medical.canon/support/security-advisories',\n  Fujifilm: 'https://www.fujifilmhealthcare.com/support/security',\n  Hologic: 'https://www.hologic.com/support/security'\n};\n\nexport async function fetchVendorAdvisories(): Promise<VendorAdvisory[]> {\n  // For MVP, returning mock data structure\n  // In production, would scrape/fetch from actual vendor pages\n  const mockAdvisories: VendorAdvisory[] = [\n    {\n      id: 'ge-2025-001',\n      vendor: 'GE Healthcare',\n      title: 'Security Update for Optima CT660',\n      description: 'Critical firmware update addressing network vulnerability in CT scanning systems',\n      severity: 'high',\n      affectedProducts: ['Optima CT660', 'Optima CT540'],\n      publishedDate: new Date().toISOString(),\n      url: VENDOR_SOURCES.GE\n    },\n    {\n      id: 'siemens-2025-002',\n      vendor: 'Siemens Healthineers',\n      title: 'MAGNETOM Software Patch',\n      description: 'Software update for MAGNETOM MRI systems to address image reconstruction issue',\n      severity: 'medium',\n      affectedProducts: ['MAGNETOM Vida', 'MAGNETOM Sola'],\n      publishedDate: new Date().toISOString(),\n      url: VENDOR_SOURCES.Siemens\n    }\n  ];\n\n  return mockAdvisories;\n}\n\nexport async function checkVendorAdvisories(): Promise<any[]> {\n  try {\n    const advisories = await fetchVendorAdvisories();\n    \n    return advisories.map(advisory => ({\n      id: advisory.id,\n      source: 'Vendor Advisory',\n      sourceId: advisory.id,\n      title: `${advisory.vendor}: ${advisory.title}`,\n      summary: advisory.description,\n      category: 'Important', // As specified in brief\n      score: 55, // Medium baseline for vendor advisories\n      vendor: advisory.vendor,\n      severity: advisory.severity,\n      affectedProducts: advisory.affectedProducts,\n      url: advisory.url,\n      sourceDate: new Date(advisory.publishedDate),\n      type: 'vendor_advisory'\n    }));\n  } catch (error) {\n    console.error('Error fetching vendor advisories:', error);\n    return [];\n  }\n}","size_bytes":2621},"server/routes/auth.ts":{"content":"import { Router } from 'express';\nimport { hashPassword, verifyPassword } from '../lib/auth';\nimport { getUserByEmail, createUser, updateUser, readJSON } from '../lib/json-storage';\nimport { v4 as uuidv4 } from 'uuid';\n\nconst router = Router();\n\n// POST /auth/signup\nrouter.post('/signup', async (req, res) => {\n  try {\n    const { email, password } = req.body;\n    \n    if (!email || !password) {\n      return res.status(400).json({ error: 'Email and password required' });\n    }\n\n    // Check if user exists\n    const existingUser = await getUserByEmail(email);\n    if (existingUser) {\n      return res.status(400).json({ error: 'Email already registered' });\n    }\n\n    // Create new user\n    const hashedPassword = await hashPassword(password);\n    const newUser = {\n      id: uuidv4(),\n      email,\n      password: hashedPassword,\n      createdAt: new Date().toISOString(),\n      onboardingCompleted: false\n    };\n\n    await createUser(newUser);\n\n    // Set session\n    req.session.userId = newUser.id;\n    \n    res.json({ \n      success: true, \n      user: { id: newUser.id, email: newUser.email }\n    });\n  } catch (error) {\n    console.error('Signup error:', error);\n    res.status(500).json({ error: 'Failed to create account' });\n  }\n});\n\n// POST /auth/login\nrouter.post('/login', async (req, res) => {\n  try {\n    const { email, password } = req.body;\n    \n    if (!email || !password) {\n      return res.status(400).json({ error: 'Email and password required' });\n    }\n\n    const user = await getUserByEmail(email);\n    if (!user) {\n      return res.status(401).json({ error: 'Invalid credentials' });\n    }\n\n    const isValid = await verifyPassword(password, user.password);\n    if (!isValid) {\n      return res.status(401).json({ error: 'Invalid credentials' });\n    }\n\n    // Update last login\n    await updateUser(user.id, { lastLogin: new Date().toISOString() });\n\n    // Set session\n    req.session.userId = user.id;\n    \n    res.json({ \n      success: true, \n      user: { id: user.id, email: user.email }\n    });\n  } catch (error) {\n    console.error('Login error:', error);\n    res.status(500).json({ error: 'Failed to login' });\n  }\n});\n\n// POST /auth/logout\nrouter.post('/logout', (req, res) => {\n  req.session.destroy((err) => {\n    if (err) {\n      return res.status(500).json({ error: 'Failed to logout' });\n    }\n    res.clearCookie('connect.sid');\n    res.json({ success: true });\n  });\n});\n\n// GET /me\nrouter.get('/me', async (req, res) => {\n  try {\n    if (!req.session?.userId) {\n      return res.status(401).json({ error: 'Not authenticated' });\n    }\n\n    const users = await readJSON('users.json');\n    const user = users.find((u: any) => u.id === req.session.userId);\n    \n    if (!user) {\n      return res.status(404).json({ error: 'User not found' });\n    }\n\n    res.json({ \n      id: user.id, \n      email: user.email,\n      onboardingCompleted: user.onboardingCompleted \n    });\n  } catch (error) {\n    console.error('Get user error:', error);\n    res.status(500).json({ error: 'Failed to get user' });\n  }\n});\n\nexport default router;","size_bytes":3074},"client/src/components/onboarding-modal.tsx":{"content":"import { useState, useEffect } from 'react';\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from '@/components/ui/dialog';\nimport { Button } from '@/components/ui/button';\nimport { Info } from 'lucide-react';\n\nexport function OnboardingModal() {\n  const [open, setOpen] = useState(false);\n\n  useEffect(() => {\n    // Check if user has seen onboarding\n    const hasSeenOnboarding = localStorage.getItem('hasSeenOnboarding');\n    if (!hasSeenOnboarding) {\n      setOpen(true);\n    }\n  }, []);\n\n  const handleDismiss = () => {\n    localStorage.setItem('hasSeenOnboarding', 'true');\n    setOpen(false);\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={setOpen}>\n      <DialogContent className=\"max-w-md\">\n        <DialogHeader>\n          <DialogTitle>A quick note about using RadIntel</DialogTitle>\n          <DialogDescription className=\"text-base leading-relaxed mt-3\">\n            RadIntel provides regulatory, reimbursement, and device-safety intelligence \n            to support operational decision-making. It is for informational purposes only \n            and is not medical, legal, or financial advice — consult qualified professionals \n            for clinical or legal decisions.\n          </DialogDescription>\n        </DialogHeader>\n        <DialogFooter className=\"flex flex-col gap-2\">\n          <Button onClick={handleDismiss} className=\"w-full\">\n            Got it — continue\n          </Button>\n          <a href=\"/legal/disclaimer\" className=\"text-xs text-center text-muted-foreground hover:underline\">\n            Read full disclaimer →\n          </a>\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":1706},"client/src/pages/auth.tsx":{"content":"import React, { useState } from 'react';\nimport { useLocation } from 'wouter';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { apiRequest } from '@/lib/queryClient';\n\nexport function AuthPage() {\n  const [, setLocation] = useLocation();\n  const [isLogin, setIsLogin] = useState(true);\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [error, setError] = useState('');\n  const [loading, setLoading] = useState(false);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setError('');\n    setLoading(true);\n\n    try {\n      const endpoint = isLogin ? '/auth/login' : '/auth/signup';\n      const response = await apiRequest('POST', endpoint, { email, password });\n      const data = await response.json();\n\n      if (data.success) {\n        setLocation('/dashboard');\n      }\n    } catch (err: any) {\n      setError(err.message || 'Authentication failed');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-50 to-slate-100 dark:from-slate-900 dark:to-slate-800 flex items-center justify-center p-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"space-y-1\">\n          <CardTitle className=\"text-2xl font-bold\">\n            {isLogin ? 'Sign In' : 'Create Account'}\n          </CardTitle>\n          <p className=\"text-sm text-muted-foreground\">\n            {isLogin \n              ? 'Enter your credentials to access RadIntel CA' \n              : 'Sign up for regulatory intelligence for radiology'}\n          </p>\n        </CardHeader>\n        <CardContent>\n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"email\">Email</Label>\n              <Input\n                id=\"email\"\n                type=\"email\"\n                placeholder=\"name@example.com\"\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n                required\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"password\">Password</Label>\n              <Input\n                id=\"password\"\n                type=\"password\"\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n                required\n              />\n            </div>\n            \n            {error && (\n              <Alert variant=\"destructive\">\n                <AlertDescription>{error}</AlertDescription>\n              </Alert>\n            )}\n\n            <Button type=\"submit\" className=\"w-full\" disabled={loading}>\n              {loading ? 'Processing...' : (isLogin ? 'Sign In' : 'Sign Up')}\n            </Button>\n          </form>\n\n          <div className=\"mt-4 text-center\">\n            <button\n              type=\"button\"\n              className=\"text-sm text-blue-600 hover:underline\"\n              onClick={() => {\n                setIsLogin(!isLogin);\n                setError('');\n              }}\n            >\n              {isLogin \n                ? \"Don't have an account? Sign up\" \n                : 'Already have an account? Sign in'}\n            </button>\n          </div>\n\n          <div className=\"mt-6 pt-6 border-t text-xs text-center text-muted-foreground\">\n            Regulatory & operational intelligence for radiology. \n            For informational purposes only — not medical, legal, or financial advice.\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":3796},"client/src/pages/landing.tsx":{"content":"import { useLocation } from 'wouter';\nimport { Button } from '@/components/ui/button';\nimport { Card } from '@/components/ui/card';\nimport { Shield, AlertCircle, DollarSign, Clock, Database, Users } from 'lucide-react';\n\nexport function LandingPage() {\n  const [, setLocation] = useLocation();\n\n  const features = [\n    {\n      icon: <Shield className=\"h-12 w-12 text-blue-600\" />,\n      title: \"FDA & California Compliance\",\n      description: \"Real-time monitoring of FDA recalls, CDPH alerts, and California RHB regulations specific to radiology.\"\n    },\n    {\n      icon: <DollarSign className=\"h-12 w-12 text-green-600\" />,\n      title: \"CMS Payment Intelligence\",\n      description: \"Track CPT code changes and calculate financial impact for your specific modality mix.\"\n    },\n    {\n      icon: <AlertCircle className=\"h-12 w-12 text-orange-600\" />,\n      title: \"Smart Alert Prioritization\",\n      description: \"AI-powered scoring ranks alerts by relevance to your devices and California location.\"\n    },\n    {\n      icon: <Clock className=\"h-12 w-12 text-purple-600\" />,\n      title: \"Deadline Tracking\",\n      description: \"Never miss MQSA audits or compliance deadlines with automated reminders.\"\n    },\n    {\n      icon: <Database className=\"h-12 w-12 text-indigo-600\" />,\n      title: \"Vendor Advisories\",\n      description: \"Security updates and firmware patches for GE, Siemens, Philips, and other major vendors.\"\n    },\n    {\n      icon: <Users className=\"h-12 w-12 text-red-600\" />,\n      title: \"Multi-Clinic Support\",\n      description: \"Manage compliance across multiple California locations from a single dashboard.\"\n    }\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-b from-white to-slate-50 dark:from-slate-900 dark:to-slate-800\">\n      {/* Hero Section */}\n      <div className=\"container mx-auto px-4 py-16\">\n        <div className=\"text-center max-w-3xl mx-auto\">\n          <h1 className=\"text-5xl font-bold mb-6 bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent\">\n            RadIntel CA\n          </h1>\n          <p className=\"text-xl text-muted-foreground mb-8\">\n            Regulatory & Operational Intelligence for California Radiology Clinics\n          </p>\n          <p className=\"text-lg mb-8\">\n            Stay ahead of FDA recalls, California state regulations, CMS payment changes, and vendor advisories — all in one intelligent platform designed specifically for radiology.\n          </p>\n          <div className=\"flex gap-4 justify-center\">\n            <Button size=\"lg\" onClick={() => setLocation('/auth')}>\n              Get Started\n            </Button>\n            <Button size=\"lg\" variant=\"outline\" onClick={() => setLocation('/pricing')}>\n              View Pricing\n            </Button>\n          </div>\n        </div>\n      </div>\n\n      {/* Features Grid */}\n      <div className=\"container mx-auto px-4 py-16\">\n        <h2 className=\"text-3xl font-bold text-center mb-12\">\n          Built for California Radiology Clinics\n        </h2>\n        <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n          {features.map((feature, index) => (\n            <Card key={index} className=\"p-6 hover:shadow-lg transition-shadow\">\n              <div className=\"mb-4\">{feature.icon}</div>\n              <h3 className=\"text-xl font-semibold mb-2\">{feature.title}</h3>\n              <p className=\"text-muted-foreground\">{feature.description}</p>\n            </Card>\n          ))}\n        </div>\n      </div>\n\n      {/* CTA Section */}\n      <div className=\"container mx-auto px-4 py-16\">\n        <Card className=\"p-12 bg-gradient-to-r from-blue-50 to-purple-50 dark:from-blue-950 dark:to-purple-950 border-none\">\n          <div className=\"text-center\">\n            <h2 className=\"text-3xl font-bold mb-4\">\n              Start Your Free Trial Today\n            </h2>\n            <p className=\"text-lg mb-8 max-w-2xl mx-auto\">\n              Join leading radiology clinics across California who trust RadIntel for their compliance and regulatory intelligence needs.\n            </p>\n            <Button size=\"lg\" onClick={() => setLocation('/auth')}>\n              Sign Up Now\n            </Button>\n          </div>\n        </Card>\n      </div>\n\n      {/* Footer Disclaimer */}\n      <footer className=\"bg-slate-100 dark:bg-slate-900 py-8 mt-16\">\n        <div className=\"container mx-auto px-4 text-center\">\n          <p className=\"text-sm text-muted-foreground\">\n            Regulatory & operational intelligence for radiology. For informational purposes only — not medical, legal, or financial advice.\n          </p>\n          <div className=\"mt-4 space-x-4\">\n            <button \n              className=\"text-sm text-blue-600 hover:underline\"\n              onClick={() => setLocation('/privacy')}\n            >\n              Privacy Policy\n            </button>\n            <button \n              className=\"text-sm text-blue-600 hover:underline\"\n              onClick={() => setLocation('/terms')}\n            >\n              Terms of Service\n            </button>\n            <button \n              className=\"text-sm text-blue-600 hover:underline\"\n              onClick={() => setLocation('/legal/disclaimer')}\n            >\n              Full Disclaimer\n            </button>\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n}","size_bytes":5343}}}